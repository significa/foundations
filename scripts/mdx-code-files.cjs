const path = require('path');
const fs = require('fs');

const ROOT_DIRECTORY = 'src/';
const TARGET_DIRECTORY = '.mdx-code-files';
const SOURCE_DIRECTORIES = ['components/foundations'];

function toPascalCase(str) {
  return str
    .toLowerCase()
    .replace(/(?:^|\s|-|_|\.)\w/g, (match) => match.toUpperCase()) // capitalize first letter after space, dash, underscore, or dot
    .replace(/[^a-zA-Z]/g, ''); // remove numbers and special characters
}

function writeMdxCodeFiles() {
  try {
    const startTime = performance.now();
    console.log('Writing MDX code files...');

    // validate source directories
    const fullSourceDirectories = SOURCE_DIRECTORIES.map((dir) =>
      path.join(ROOT_DIRECTORY, dir)
    ).filter((dir) => {
      const exists = fs.existsSync(dir);

      if (!exists) {
        console.warn(`└ Skipping invalid source directory: '${dir}'`);
      }

      return exists;
    });

    // clear/create target directory
    if (fs.existsSync(TARGET_DIRECTORY)) {
      fs.readdirSync(TARGET_DIRECTORY).forEach((filename) =>
        fs.rmSync(path.join(TARGET_DIRECTORY, filename))
      );
    } else {
      fs.mkdirSync(TARGET_DIRECTORY);
    }

    // read all files in source directories
    const files = fullSourceDirectories
      .flatMap((dir) => fs.readdirSync(dir, { withFileTypes: true }))
      .filter((dirent) => dirent.isFile())
      .map(({ name, path: filepath }) => {
        const extension = path.extname(name);
        const basename = path.basename(name, extension);

        return { name, extension, basename, path: filepath };
      });

    const index = { filename: 'index.tsx', imports: [], entries: [] };

    for (const file of files) {
      let rawFileContent = fs.readFileSync(path.join(file.path, file.name), 'utf8');
      rawFileContent = rawFileContent.replace(/\n$/, ''); // remove trailing line break

      const fileType = file.extension.replace(/^\.+/, ''); // remove leading dot
      const mdxContentString = `\`\`\`${fileType} copy\n${rawFileContent}\n\`\`\`\n`;

      const mdxBasename = `${toPascalCase(file.basename)}Code`;
      const mdxFilename = `${mdxBasename}.mdx`;
      const mdxPath = path.join(TARGET_DIRECTORY, mdxFilename);

      // write mdx file
      fs.writeFileSync(mdxPath, mdxContentString, 'utf8');

      index.imports.push(`import ${mdxBasename} from './${mdxFilename}';`);
      index.entries.push(
        `'${file.path.replace(ROOT_DIRECTORY, '')}/${file.basename}': ${mdxBasename}`
      );
    }

    const indexContentString = [
      `// @ts-nocheck`,
      `// This file is autogenerated by scripts/mdx-code-files.ts`,
      `// Do not edit this file directly.`,
      index.imports.join('\n'),
      ``,
      `export const INDEX = {`,
      `  ${index.entries.join(',\n  ')}`,
      `};`,
      ``
    ].join('\n');

    // write index.tsx
    fs.writeFileSync(path.join(TARGET_DIRECTORY, index.filename), indexContentString, 'utf8');

    const duration = performance.now() - startTime;
    console.log(`└ Done (${files.length} files in ${duration.toFixed(3)}ms)`);
  } catch (err) {
    console.error(err);
  }
}

// auto-run script on npm '--run' flag
const args = process.argv.slice(2);
if (args.indexOf('--run') !== -1) {
  writeMdxCodeFiles();
}

module.exports = {
  SOURCE_DIRECTORIES,
  writeMdxCodeFiles
};
