import fs from "fs";
import path from "path";
import { exec } from "child_process";

const srcDir = path.join(process.cwd(), "src");
const targetFile = path.join(process.cwd(), "src/lib/examples-registry.ts");

function escapeTemplateString(str: string) {
  return str
    .replace(/\\/g, "\\\\") // escape backslashes first
    .replace(/`/g, "\\`") // escape backticks
    .replace(/\$\{/g, "\\${"); // escape template literal interpolations
}

function main() {
  const components: Record<string, { component: string; source: string }> = {}; // Dictionary to hold component paths

  // Recursively read through the src directory
  function readDir(dir: string) {
    fs.readdirSync(dir).forEach((file) => {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        readDir(fullPath);
      } else if (file.endsWith(".preview.tsx")) {
        const slug = path.basename(file, ".preview.tsx");

        // Check if component name is already used
        if (components[slug]) {
          throw new Error(
            `Preview component name "${slug}" is already used. Each preview component must have a unique name.`
          );
        }

        const importPath = fullPath
          .replace(process.cwd(), "")
          .replace("/src/", "@/")
          .replace(".tsx", "");

        const source = fs.readFileSync(fullPath, "utf-8");

        components[slug] = {
          component: `dynamic(() => import("${importPath}"))`,
          source: escapeTemplateString(source),
        };
      }
    });
  }

  readDir(srcDir);

  // Generate the imports.ts content
  const importsContent = `// DO NOT EDIT. This file is automatically generated by the generate-imports script.
  
import dynamic from "next/dynamic";
import { ComponentType } from "react";

type Import = {
  component: ComponentType;
  source: string;
};

export const imports: Record<string, Import> = {
  ${Object.entries(components)
    .map(
      ([key, value]) =>
        `['${key}']: { component: ${value.component}, source: \`${value.source}\`}`
    )
    .join(",\n  ")}
};
`;

  // Write to imports.ts
  fs.writeFileSync(targetFile, importsContent);
  console.log("imports.ts has been generated.");

  // Run Prettier on the generated file
  exec(`npx prettier --write ${targetFile}`, (error, stdout, stderr) => {
    if (error) {
      console.error(`Error running Prettier: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`Prettier stderr: ${stderr}`);
      return;
    }
    console.log(`Prettier output: ${stdout}`);
  });
}

const shouldWatch = process.argv.includes("--watch");

if (shouldWatch) {
  fs.watch(srcDir, { recursive: true }, (eventType, filename) => {
    if (filename && filename.endsWith(".preview.tsx")) {
      console.log(`Preview file changed: ${filename}`);
      main();
    }
  });
}

// Initial generation
main();
