// DO NOT EDIT. This file is automatically generated by the generate-imports script.

import dynamic from "next/dynamic";
import { ComponentType } from "react";

type Import = {
  component: ComponentType;
  source: string;
};

export const imports: Record<string, Import> = {
  ["accessible-forms"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/guides/accessible-forms/examples/accessible-forms.preview"
        )
    ),
    source: `"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { Button } from "@/foundations/ui/button/button";

import { Field } from "../field";
import { FieldDescription } from "../field-description";
import { FieldError } from "../field-error";

import {
  Fieldset,
  Legend,
} from "@/foundations/guides/accessible-forms/fieldset";
import { Label } from "./label";
import { Input } from "./input";
import { Select } from "./select";
import { Textarea } from "./textarea";
import { Radio, RadioGroup } from "./radio";
import { Checkbox } from "./checkbox";

const schema = z.object({
  company: z.string().optional(),
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email").min(1, "Email is required"),
  country: z.string().min(1, "Please select a country"),
  message: z.string().optional(),
  preference: z.enum(["email", "phone"], {
    errorMap: () => ({ message: "Please select a preference" }),
  }),
  newsletter: z.boolean(),
  terms: z.literal(true, {
    errorMap: () => ({ message: "Please accept the terms and conditions" }),
  }),
});

type FormData = z.infer<typeof schema>;

export default function FieldPreview() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    mode: "onBlur",
  });

  const onSubmit = (data: FormData) => {
    alert(JSON.stringify(data, null, 2));
  };

  return (
    <div className="mx-auto max-w-md p-10">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        <Fieldset>
          <Legend>Personal information</Legend>

          <Field className="flex flex-col gap-2">
            <Label>Company</Label>
            <Input {...register("company")} />
          </Field>

          <Field className="flex flex-col gap-2">
            <div>
              <Label>Name</Label>
              <FieldDescription>
                This is a description very very long description
              </FieldDescription>
            </div>
            <Input {...register("name", { required: true })} />
            <FieldError>{errors.name?.message}</FieldError>
          </Field>

          <Field className="flex flex-col gap-2">
            <div>
              <Label>Email</Label>
              <FieldDescription>Your work e-mail address</FieldDescription>
            </div>
            <Input type="email" {...register("email", { required: true })} />
            <FieldDescription>
              Your work e-mail address is preferred because it is more secure.
              Please ask your administrator to whitelist the significa.co
              domain.
            </FieldDescription>
            <FieldError>{errors.email?.message}</FieldError>
          </Field>

          <Field className="flex flex-col gap-2">
            <div>
              <Label>Country</Label>
              <FieldDescription>
                Your country is required to continue with the registration.
              </FieldDescription>
            </div>
            <Select {...register("country")}>
              <option value="" disabled>
                Select a country
              </option>
              {["United States", "Canada", "United Kingdom", "Australia"].map(
                (country) => (
                  <option key={country} value={country}>
                    {country}
                  </option>
                )
              )}
            </Select>
            <FieldError>{errors.country?.message}</FieldError>
          </Field>

          <Field className="flex flex-col gap-2">
            <Label>Message</Label>
            <Textarea {...register("message")} />
            <FieldError>{errors.message?.message}</FieldError>
          </Field>
        </Fieldset>

        <Fieldset>
          <Legend>Communication</Legend>

          <Field className="flex flex-col gap-2">
            <Label>Contact preference</Label>

            <RadioGroup required className="flex flex-col gap-2">
              <Field className="flex items-center gap-2">
                <Radio
                  {...register("preference", { required: true })}
                  value="email"
                />
                <Label>Email</Label>
              </Field>
              <Field className="flex items-center gap-2">
                <Radio
                  {...register("preference", { required: true })}
                  value="phone"
                />
                <Label>Phone</Label>
              </Field>
            </RadioGroup>

            <FieldError />
          </Field>

          <div className="space-y-2">
            <Field className="flex flex-col gap-2">
              <div className="flex items-center gap-2">
                <Checkbox {...register("terms", { required: true })} />
                <Label>Accept terms and conditions</Label>
              </div>
              <FieldError>{errors.terms?.message}</FieldError>
            </Field>

            <Field className="flex flex-col gap-2">
              <div className="flex items-center gap-2">
                <Checkbox {...register("newsletter")} />
                <Label>Subscribe to newsletter</Label>
              </div>
              <FieldError>{errors.newsletter?.message}</FieldError>
            </Field>
          </div>
        </Fieldset>

        <Button type="submit">Submit</Button>
      </form>
    </div>
  );
}
`,
  },
  ["avatar-broken-image"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/avatar/examples/avatar-broken-image.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../avatar";

export default function AvatarBrokenImagePreview() {
  return (
    <Avatar>
      <AvatarImage src="broken-image-url" />
      <AvatarFallback>Pedro Brandão</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["avatar-custom-color"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/avatar/examples/avatar-custom-color.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarCustomColorPreview() {
  return (
    <Avatar className="bg-emerald-500/20">
      <AvatarFallback>Pedro Brandão</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["avatar-fallback"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar-fallback.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarFallbackPreview() {
  return (
    <div className="flex flex-wrap gap-2">
      {/* Full name */}
      <Avatar>
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      {/* One word */}
      <Avatar>
        <AvatarFallback>Significa</AvatarFallback>
      </Avatar>
      {/* Initials */}
      <Avatar>
        <AvatarFallback>PB</AvatarFallback>
      </Avatar>
      {/* No fallback */}
      <Avatar>
        <AvatarFallback />
      </Avatar>
    </div>
  );
}
`,
  },
  ["avatar-on-top-of-media"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/avatar/examples/avatar-on-top-of-media.preview"
        )
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarOnTopOfMediaPreview() {
  return (
    <div
      className="relative size-32 overflow-hidden rounded-lg bg-cover bg-center"
      style={{
        backgroundImage:
          "url(https://images.unsplash.com/photo-1682687220742-aba13b6e50ba?q=80)",
      }}
    >
      <div className="flex h-full items-center justify-center">
        <Avatar>
          <AvatarFallback>Pedro Brandão</AvatarFallback>
        </Avatar>
      </div>
    </div>
  );
}
`,
  },
  ["avatar-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar-sizes.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Avatar size="2xs">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="xs">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="sm">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="md">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="lg">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="xl">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="2xl">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="3xl">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
    </div>
  );
}
`,
  },
  ["avatar"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../avatar";

export default function AvatarPreview() {
  return (
    <Avatar>
      <AvatarImage src="https://github.com/pdrbrnd.png" />
      <AvatarFallback>Pedro Brandão</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["badge-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge-sizes.preview")
    ),
    source: `import { Badge } from "../badge";

export default function BadgeSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Badge size="xs">Extra small</Badge>
      <Badge size="sm">Small</Badge>
      <Badge size="md">Medium</Badge>
    </div>
  );
}
`,
  },
  ["badge-variants"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge-variants.preview")
    ),
    source: `import { Badge } from "../badge";

export default function BadgeVariantsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Badge variant="neutral">Neutral</Badge>
      <Badge variant="success">Success</Badge>
      <Badge variant="error">Error</Badge>
      <Badge variant="warning">Warning</Badge>
      <Badge variant="info">Info</Badge>
    </div>
  );
}
`,
  },
  ["badge"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge.preview")
    ),
    source: `import { Package } from "@phosphor-icons/react/dist/ssr";
import { Badge, BadgeIcon, BadgeStatus } from "../badge";

export default function BadgePreview() {
  return (
    <Badge>
      <BadgeIcon>
        <Package />
      </BadgeIcon>
      <span>Up to date</span>
      <BadgeStatus className="bg-emerald-500" />
    </Badge>
  );
}
`,
  },
  ["button-as-link"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-as-link.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import { ArrowSquareOut, Package } from "@phosphor-icons/react/dist/ssr";

export default function ButtonLinkPreview() {
  return (
    <Button variant="outline" asChild>
      <a href="https://significa.co" target="_blank">
        <Package />
        <span>Significa website</span>
        <ArrowSquareOut />
      </a>
    </Button>
  );
}
`,
  },
  ["button-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-disabled.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonDisabledPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button disabled variant="primary">
        Primary
      </Button>
      <Button disabled variant="outline">
        Outline
      </Button>
      <Button disabled variant="ghost">
        Ghost
      </Button>
      <Button disabled variant="destructive">
        Destructive
      </Button>
    </div>
  );
}
`,
  },
  ["button-icons"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-icons.preview")
    ),
    source: `import {
  ArrowSquareOut,
  Package,
  Pencil,
  Sun,
} from "@phosphor-icons/react/dist/ssr";
import { Button } from "../button";

export default function ButtonIconsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button variant="outline" square aria-label="Switch theme">
        <Sun />
      </Button>
      <Button variant="outline">
        <Pencil />
        <span>Edit</span>
      </Button>
      <Button variant="outline">
        <Package />
        <span>External link</span>
        <ArrowSquareOut />
      </Button>
    </div>
  );
}
`,
  },
  ["button-loading"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-loading.preview")
    ),
    source: `"use client";

import { Button } from "@/foundations/ui/button/button";
import { useState } from "react";

export default function ButtonExample() {
  const [isLoading, setIsLoading] = useState(false);

  return (
    <Button onClick={() => setIsLoading(!isLoading)} isLoading={isLoading}>
      Click to toggle
    </Button>
  );
}
`,
  },
  ["button-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-sizes.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button size="sm">Small</Button>
      <Button size="md">Medium</Button>
      <Button size="lg">Large</Button>
    </div>
  );
}
`,
  },
  ["button-variants"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-variants.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonVariantsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button variant="primary">Primary</Button>
      <Button variant="outline">Outline</Button>
      <Button variant="ghost">Ghost</Button>
      <Button variant="destructive">Destructive</Button>
    </div>
  );
}
`,
  },
  ["button"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import { HandPointing } from "@phosphor-icons/react/dist/ssr";

export default function ButtonExample() {
  return (
    <Button>
      <HandPointing />
      <span>Click me</span>
    </Button>
  );
}
`,
  },
  ["calendar-disable-future"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/calendar/examples/calendar-disable-future.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarDisableFuturePreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar
      value={selectedDate}
      onDateChange={setSelectedDate}
      getIsDisabled={(date: Date) => date > new Date()}
    />
  );
}
`,
  },
  ["calendar-locale"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar-locale.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarLocalePreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar value={selectedDate} onDateChange={setSelectedDate} locale="pt" />
  );
}
`,
  },
  ["calendar-range"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar-range.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarRangePreview() {
  const [dateRange, setDateRange] = useState<[Date, Date]>([
    new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
    new Date(),
  ]);

  return (
    <Calendar mode="range" value={dateRange} onDateChange={setDateRange} />
  );
}
`,
  },
  ["calendar-start-day"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/calendar/examples/calendar-start-day.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarStartDayPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar
      value={selectedDate}
      onDateChange={setSelectedDate}
      startWeekOn={1} // Start on Monday
    />
  );
}
`,
  },
  ["calendar"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return <Calendar value={selectedDate} onDateChange={setSelectedDate} />;
}
`,
  },
  ["checkbox-all-states"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/checkbox/examples/checkbox-all-states.preview")
    ),
    source: `"use client";

import { Label } from "@/foundations/ui/label/label";
import { Checkbox } from "../checkbox";

export default function CheckboxAllStatesPreview() {
  return (
    <div className="flex flex-col space-y-4">
      <div className="flex items-center space-x-2">
        <Checkbox id="unchecked" />
        <Label htmlFor="unchecked">Unchecked</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="checked" checked onChange={() => {}} />
        <Label htmlFor="checked">Checked</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="indeterminate" indeterminate />
        <Label htmlFor="indeterminate">Indeterminate</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled" disabled />
        <Label htmlFor="disabled">Disabled</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled-checked" checked disabled />
        <Label htmlFor="disabled-checked">Checked Disabled</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled-indeterminate" indeterminate disabled />
        <Label htmlFor="disabled-indeterminate">Indeterminate Disabled</Label>
      </div>
    </div>
  );
}
`,
  },
  ["checkbox-disabled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/checkbox/examples/checkbox-disabled.preview")
    ),
    source: `import { Checkbox } from "../checkbox";

export default function CheckboxDisabledPreview() {
  return (
    <div className="flex flex-col space-y-4">
      <Checkbox disabled />
      <Checkbox checked disabled />
    </div>
  );
}
`,
  },
  ["checkbox"]: {
    component: dynamic(
      () => import("@/foundations/ui/checkbox/examples/checkbox.preview")
    ),
    source: `import { Checkbox } from "../checkbox";

export default function CheckboxPreview() {
  return <Checkbox />;
}
`,
  },
  ["date-picker-date-time"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/date-picker/examples/date-picker-date-time.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerPanel, DatePickerTrigger } from "../date-picker";
import { Input } from "../../input/input";

export default function DatePickerDateTimePreview() {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());

  return (
    <div className="flex items-center gap-2">
      <DatePicker placement="bottom-start">
        <DatePickerTrigger className="w-60" placeholder="Select date">
          {format(selectedDate, "PPP")}
        </DatePickerTrigger>
        <DatePickerPanel
          className="w-72"
          value={selectedDate || new Date()}
          onDateChange={(date: Date) => {
            setSelectedDate(date);
          }}
        />
      </DatePicker>
      <Input className="w-40" type="time" />
    </div>
  );
}
`,
  },
  ["date-picker-shortcuts"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/date-picker/examples/date-picker-shortcuts.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerTrigger, DatePickerPanel } from "../date-picker";
import { DropdownDivider, DropdownItem } from "../../dropdown/dropdown";

export default function DatePickerShortcutsPreview() {
  const [dateRange, setDateRange] = useState<[Date, Date] | null>(null);

  return (
    <DatePicker placement="bottom-start">
      <DatePickerTrigger className="w-80" placeholder="Select date range">
        {dateRange
          ? format(dateRange[0], "MM/dd/yyyy") +
            " - " +
            format(dateRange[1], "MM/dd/yyyy")
          : undefined}
      </DatePickerTrigger>
      <DatePickerPanel
        className="w-80"
        mode="range"
        value={dateRange}
        onDateChange={(dates: [Date, Date]) => {
          setDateRange(dates);
        }}
      >
        <DropdownDivider />
        <DropdownItem
          onSelect={() => {
            setDateRange([new Date(), new Date()]);
          }}
        >
          Today
        </DropdownItem>
        <DropdownItem
          onSelect={() => {
            setDateRange([
              new Date(new Date().setDate(new Date().getDate() - 1)),
              new Date(new Date().setDate(new Date().getDate() - 1)),
            ]);
          }}
        >
          Yesterday
        </DropdownItem>
        <DropdownItem
          onSelect={() => {
            setDateRange([
              new Date(new Date().setDate(new Date().getDate() - 7)),
              new Date(),
            ]);
          }}
        >
          Last 7 days
        </DropdownItem>
        <DropdownDivider />
        <DropdownItem
          className="text-red-500"
          onSelect={() => {
            setDateRange(null);
          }}
        >
          Clear
        </DropdownItem>
      </DatePickerPanel>
    </DatePicker>
  );
}
`,
  },
  ["date-picker"]: {
    component: dynamic(
      () => import("@/foundations/ui/date-picker/examples/date-picker.preview")
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerPanel, DatePickerTrigger } from "../date-picker";

export default function DatePickerPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <DatePicker placement="bottom-start">
      <DatePickerTrigger className="w-60" placeholder="Select date">
        {selectedDate ? format(selectedDate, "PPP") : undefined}
      </DatePickerTrigger>
      <DatePickerPanel
        className="w-72"
        value={selectedDate}
        onDateChange={(date: Date) => {
          setSelectedDate(date);
        }}
      />
    </DatePicker>
  );
}
`,
  },
  ["dialog-arbitrary"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-arbitrary.preview")
    ),
    source: `import { X } from "@phosphor-icons/react/dist/ssr";

import { Button } from "../../button/button";
import { Dialog, DialogClose, DialogContent, DialogTrigger } from "../dialog";

export default function DialogArbitraryPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Dialog</Button>
      </DialogTrigger>
      <DialogContent className="p-0">
        <DialogClose className="absolute top-3 right-3" asChild>
          <Button variant="outline" size="sm" square>
            <X className="size-4" />
          </Button>
        </DialogClose>
        <div className="flex flex-col items-center rounded-2xl p-6">
          <div className="border-border bg-background-secondary mb-4 size-24 rounded-full border" />
          <h2 className="text-xl font-semibold">John Doe</h2>
          <p className="text-foreground-secondary mb-4 text-sm">
            Software Engineer
          </p>
          <div className="mb-6 flex space-x-4">
            <div className="text-center">
              <p className="font-semibold">1.2k</p>
              <p className="text-foreground-secondary text-xs">Followers</p>
            </div>
            <div className="text-center">
              <p className="font-semibold">3.4k</p>
              <p className="text-foreground-secondary text-xs">Following</p>
            </div>
            <div className="text-center">
              <p className="font-semibold">567</p>
              <p className="text-foreground-secondary text-xs">Posts</p>
            </div>
          </div>
          <Button>Follow</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-destructive"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/dialog/examples/dialog-destructive.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogDestructivePreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="destructive">Delete</Button>
      </DialogTrigger>
      <DialogContent className="w-80">
        <DialogTitle>Are you sure?</DialogTitle>
        <DialogDescription>
          This action cannot be undone. This will permanently delete your
          account and remove your data from our servers.
        </DialogDescription>
        <DialogActions>
          <Button variant="destructive">Delete everything</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-tall"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-tall.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogTallPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Tall Dialog</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogTitle>Very Tall Dialog</DialogTitle>
        <div>
          {Array(20)
            .fill(null)
            .map((_, index) => (
              <p key={index} className="mb-4">
                This is paragraph {index + 1}. Lorem ipsum dolor sit amet,
                consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut
                labore et dolore magna aliqua.
              </p>
            ))}
        </div>
        <DialogActions>
          <DialogClose asChild>
            <Button variant="outline">Close</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-top"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-top.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogTopPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open at the top</Button>
      </DialogTrigger>
      <DialogContent align="top">
        <DialogTitle>Unsaved changes</DialogTitle>
        <DialogDescription>
          Are you sure you want to leave this page?
        </DialogDescription>
        <DialogActions>
          <Button>Confirm</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open</Button>
      </DialogTrigger>
      <DialogContent className="w-80">
        <DialogTitle>Unsaved changes</DialogTitle>
        <DialogDescription>
          Are you sure you want to leave this page?
        </DialogDescription>
        <DialogActions>
          <Button>Confirm</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["disclosure-chevron"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/disclosure/examples/disclosure-chevron.preview"
        )
    ),
    source: `import {
  Disclosure,
  DisclosureChevron,
  DisclosureContent,
  DisclosureTrigger,
} from "../disclosure";

export default function DisclosureChevronPreview() {
  return (
    <div className="w-90 text-sm">
      <Disclosure>
        <DisclosureTrigger>
          Sloths can hold their breath for 40 minutes?
          <DisclosureChevron />
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          While most mammals can only hold their breath for a few minutes,
          sloths can slow their heart rates to one-third of its normal rate,
          allowing them to stay underwater for up to 40 minutes! This helps them
          escape predators and swim between islands.
        </DisclosureContent>
      </Disclosure>
      <Disclosure>
        <DisclosureTrigger>
          Want to learn about platypus superpowers?
          <DisclosureChevron />
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          Platypuses have electroreceptors in their bills that detect electrical
          signals from prey! They can sense the electrical fields produced by
          the muscular contractions of small aquatic animals. They&apos;re also
          one of the few mammals that produce venom.
        </DisclosureContent>
      </Disclosure>
    </div>
  );
}
`,
  },
  ["disclosure-exclusive"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/disclosure/examples/disclosure-exclusive.preview"
        )
    ),
    source: `import {
  DisclosureGroup,
  Disclosure,
  DisclosureContent,
  DisclosureTrigger,
} from "../disclosure";

export default function DisclosurePreview() {
  return (
    <div className="w-90 text-sm">
      <DisclosureGroup>
        <Disclosure>
          <DisclosureTrigger>
            Did you know that honey never spoils?
          </DisclosureTrigger>
          <DisclosureContent className="text-foreground-secondary">
            Archaeologists have found pots of honey in ancient Egyptian tombs
            that are over 3,000 years old and still perfectly edible! The unique
            chemical composition and low moisture content make it impossible for
            bacteria to grow in honey.
          </DisclosureContent>
        </Disclosure>
        <Disclosure>
          <DisclosureTrigger>
            Want to learn about hummingbird metabolism?
          </DisclosureTrigger>
          <DisclosureContent className="text-foreground-secondary">
            A hummingbird&apos;s heart beats up to 1,260 times per minute during
            flight! They have such a fast metabolism that they need to eat every
            10-15 minutes and visit up to 2,000 flowers per day. At night, they
            enter a state called torpor where their metabolism slows down by 95%
            to survive.
          </DisclosureContent>
        </Disclosure>
      </DisclosureGroup>
    </div>
  );
}
`,
  },
  ["disclosure-styled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/disclosure/examples/disclosure-styled.preview")
    ),
    source: `import { cn } from "@/lib/utils";

import {
  Disclosure,
  DisclosureContent,
  DisclosureTrigger,
  DisclosureChevron,
  DisclosureGroup,
} from "../disclosure";

const AccordionGroup = ({
  children,
  className,
}: React.ComponentProps<"div">) => {
  return (
    <DisclosureGroup>
      <div className={cn("rounded-lg border", className)}>{children}</div>
    </DisclosureGroup>
  );
};

const Accordion = ({
  children,
  className,
}: React.ComponentProps<typeof Disclosure>) => {
  return (
    <Disclosure className={cn("border-b last:border-b-0", className)}>
      {children}
    </Disclosure>
  );
};

const AccordionTrigger = ({
  children,
  className,
}: React.ComponentProps<typeof DisclosureTrigger>) => {
  return (
    <DisclosureTrigger
      className={cn(
        "hover:bg-foreground/5 flex cursor-pointer items-center justify-between gap-4 px-3 py-2 transition-colors",
        className
      )}
    >
      {children}
      <DisclosureChevron />
    </DisclosureTrigger>
  );
};

const AccordionContent = ({
  children,
  className,
}: React.ComponentProps<typeof DisclosureContent>) => {
  return (
    <DisclosureContent>
      <div className={cn("border-t px-3 py-2", className)}>{children}</div>
    </DisclosureContent>
  );
};

export default function DisclosureStyledPreview() {
  return (
    <AccordionGroup>
      <Accordion>
        <AccordionTrigger>
          Did you know that butterflies taste with their feet?
        </AccordionTrigger>
        <AccordionContent>
          Butterflies have taste receptors on their feet that help them identify
          which plants to lay their eggs on. When they land on a plant, they can
          taste it to determine if it&apos;s suitable food for their
          caterpillars.
        </AccordionContent>
      </Accordion>
      <Accordion>
        <AccordionTrigger>
          Want to learn about tardigrade superpowers?
        </AccordionTrigger>
        <AccordionContent>
          Tardigrades, also known as water bears, can survive in space! They can
          withstand extreme temperatures, pressure, radiation, and can even
          survive being completely dehydrated for years by entering a state of
          cryptobiosis.
        </AccordionContent>
      </Accordion>
      <Accordion>
        <AccordionTrigger>
          Have you heard about the immortal jellyfish?
        </AccordionTrigger>
        <AccordionContent>
          The Turritopsis dohrnii jellyfish can technically live forever! When
          stressed or injured, it can transform back into its juvenile stage
          instead of dying, making it the only known animal capable of
          biological immortality.
        </AccordionContent>
      </Accordion>
    </AccordionGroup>
  );
}
`,
  },
  ["disclosure"]: {
    component: dynamic(
      () => import("@/foundations/ui/disclosure/examples/disclosure.preview")
    ),
    source: `import {
  Disclosure,
  DisclosureContent,
  DisclosureTrigger,
} from "../disclosure";

export default function DisclosurePreview() {
  return (
    <div className="w-90 text-sm">
      <Disclosure>
        <DisclosureTrigger>
          Did you know that octopuses have three hearts?
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          Two hearts pump blood to the gills, while the third one circulates it
          to the rest of the body. When they swim, their third heart actually
          stops beating - which is why they tend to crawl more than swim!
        </DisclosureContent>
      </Disclosure>
      <Disclosure>
        <DisclosureTrigger>
          Want to hear about immortal jellyfish?
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          The Turritopsis dohrnii jellyfish can technically live forever! When
          stressed, it can transform back into a juvenile form by turning its
          existing cells into different cell types. It&apos;s like having a
          reset button for aging!
        </DisclosureContent>
      </Disclosure>
    </div>
  );
}
`,
  },
  ["divider-vertical"]: {
    component: dynamic(
      () => import("@/foundations/ui/divider/examples/divider-vertical.preview")
    ),
    source: `import { Divider } from "../divider";

export default function DividerVerticalPreview() {
  return (
    <nav className="flex items-center gap-2">
      <p>Home</p>
      <Divider orientation="vertical" />
      <p>About</p>
    </nav>
  );
}
`,
  },
  ["divider"]: {
    component: dynamic(
      () => import("@/foundations/ui/divider/examples/divider.preview")
    ),
    source: `import { Divider } from "../divider";

export default function DividerPreview() {
  return (
    <div>
      <p>Something</p>
      <Divider />
      <p>Something else</p>
    </div>
  );
}
`,
  },
  ["input-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-disabled.preview")
    ),
    source: `import { Input } from "../input";

export default function InputDisabled() {
  return (
    <div className="w-90">
      <Input placeholder="Type something..." disabled />
    </div>
  );
}
`,
  },
  ["input-icon-action"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-icon-action.preview")
    ),
    source: `"use client";

import { Eye, EyeClosed, Lock } from "@phosphor-icons/react";
import { useState } from "react";

import { Input, InputGroup, InputPrefix, InputSuffix } from "../input";

export default function InputIconAction() {
  const [showPassword, setShowPassword] = useState(false);

  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix>
          <Lock />
        </InputPrefix>
        <Input
          type={showPassword ? "text" : "password"}
          placeholder="Your password here"
        />
        <InputSuffix interactive>
          <button onClick={() => setShowPassword(!showPassword)}>
            {showPassword ? <Eye /> : <EyeClosed />}
          </button>
        </InputSuffix>
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input-icon"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-icon.preview")
    ),
    source: `import { MagnifyingGlass } from "@phosphor-icons/react/dist/ssr";
import { Input, InputGroup, InputPrefix } from "../input";

export default function InputIcon() {
  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix>
          <MagnifyingGlass />
        </InputPrefix>
        <Input placeholder="Search something" />
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input-interactive-addon"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/input/examples/input-interactive-addon.preview"
        )
    ),
    source: `"use client";

import { useRef } from "react";
import { Info } from "@phosphor-icons/react";

import { Input, InputGroup, InputPrefix, InputSuffix } from "../input";
import { Tooltip } from "../../tooltip/tooltip";

export default function InputInteractiveAddon() {
  const input = useRef<HTMLInputElement>(null);

  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix className="flex items-center gap-2" interactive>
          <button onClick={() => alert("interactive")}>+351</button>
        </InputPrefix>
        <Input ref={input} placeholder="000 000 000" />
        <InputSuffix interactive>
          <Tooltip content="Your phone number will be visible">
            <Info />
          </Tooltip>
        </InputSuffix>
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input-invalid"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-invalid.preview")
    ),
    source: `import { Input } from "../input";

export default function InputInvalid() {
  return (
    <div className="w-90">
      <Input placeholder="Type something..." defaultValue="Pedro" invalid />
    </div>
  );
}
`,
  },
  ["input-minimal"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-minimal.preview")
    ),
    source: `import { Input } from "../input";

export default function InputMinimal() {
  return (
    <div className="w-90">
      <Input variant="minimal" placeholder="Type something..." />
    </div>
  );
}
`,
  },
  ["input-text-addons"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-text-addons.preview")
    ),
    source: `import { Input, InputGroup, InputPrefix, InputSuffix } from "../input";

export default function InputTextAddons() {
  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix>https://</InputPrefix>
        <Input placeholder="subdomain" />
        <InputSuffix>.significa.co</InputSuffix>
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input.preview")
    ),
    source: `import { Input } from "../input";

export default function InputExample() {
  return (
    <div className="w-90">
      <Input placeholder="Type something..." />
    </div>
  );
}
`,
  },
  ["label"]: {
    component: dynamic(
      () => import("@/foundations/ui/label/examples/label.preview")
    ),
    source: `import { Label } from "../label";

export default function LabelPreview() {
  return <Label>Label</Label>;
}
`,
  },
  ["radio"]: {
    component: dynamic(
      () => import("@/foundations/ui/radio/examples/radio.preview")
    ),
    source: `import { Radio } from "../radio";
import { Label } from "../../label/label";

export default function RadioPreview() {
  return (
    <div className="flex flex-col gap-4">
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Radio id="option1" name="options" />
          <Label htmlFor="option1">Option 1</Label>
        </div>
        <div className="flex items-center gap-2">
          <Radio id="option2" name="options" />
          <Label htmlFor="option2">Option 2</Label>
        </div>
        <div className="flex items-center gap-2">
          <Radio id="option3" name="options" />
          <Label htmlFor="option3">Option 3</Label>
        </div>
      </div>

      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Radio id="disabled" disabled />
          <Label htmlFor="disabled">Disabled</Label>
        </div>
        <div className="flex items-center gap-2">
          <Radio id="checked-disabled" disabled defaultChecked />
          <Label htmlFor="checked-disabled">Checked & Disabled</Label>
        </div>
      </div>
    </div>
  );
}
`,
  },
  ["skeleton"]: {
    component: dynamic(
      () => import("@/foundations/ui/skeleton/examples/skeleton.preview")
    ),
    source: `import { Skeleton } from "../skeleton";

export default function SkeletonExample() {
  return (
    <div className="flex items-center gap-1">
      <Skeleton className="size-10 rounded-full" />
      <div className="flex flex-col gap-1">
        <Skeleton className="h-4 w-24" />
        <Skeleton className="h-4 w-32" />
      </div>
    </div>
  );
}
`,
  },
  ["spinner-color"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner-color.preview")
    ),
    source: `import { Spinner } from "../spinner";

export default function SpinnerColorExample() {
  return <Spinner className="text-emerald-500" />;
}
`,
  },
  ["spinner-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner-sizes.preview")
    ),
    source: `import { Spinner } from "../spinner";

export default function SpinnerSizesExample() {
  return (
    <div className="flex flex-col items-center gap-4">
      <Spinner size="xs" />
      <Spinner size="sm" />
      <Spinner size="md" />
      <Spinner size="lg" />
    </div>
  );
}
`,
  },
  ["spinner"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner.preview")
    ),
    source: `import { Spinner } from "../spinner";

export default function SpinnerExample() {
  return <Spinner />;
}
`,
  },
  ["switch-custom-style"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/switch/examples/switch-custom-style.preview")
    ),
    source: `import { Switch } from "../switch";

export default function SwitchCustomStyle() {
  return <Switch className="bg-blue-400/20 checked:bg-blue-500" />;
}
`,
  },
  ["switch-disabled-checked"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/switch/examples/switch-disabled-checked.preview"
        )
    ),
    source: `import { Switch } from "../switch";

export default function SwitchDisabledChecked() {
  return <Switch disabled checked />;
}
`,
  },
  ["switch-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/switch/examples/switch-disabled.preview")
    ),
    source: `import { Switch } from "../switch";

export default function SwitchDisabled() {
  return <Switch disabled />;
}
`,
  },
  ["switch"]: {
    component: dynamic(
      () => import("@/foundations/ui/switch/examples/switch.preview")
    ),
    source: `import { Switch } from "../switch";

export default function SwitchPreview() {
  return <Switch />;
}
`,
  },
  ["tabs-controlled"]: {
    component: dynamic(
      () => import("@/foundations/ui/tabs/examples/tabs-controlled.preview")
    ),
    source: `"use client";

import { useState } from "react";
import { Tabs, TabsItem, TabsItems, TabsPanel, TabsPanels } from "../tabs";

export default function TabsControlledPreview() {
  const [selectedIndex, setSelectedIndex] = useState(0);

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        <span className="text-muted-foreground text-sm">Current tab:</span>
        <span className="font-medium">{selectedIndex}</span>
        <button
          onClick={() => setSelectedIndex((prev) => (prev + 1) % 3)}
          className="rounded-lg border px-3 py-1 text-sm"
        >
          Next tab
        </button>
      </div>

      <Tabs selectedIndex={selectedIndex} onChange={setSelectedIndex}>
        <TabsItems>
          <TabsItem>Tab 1</TabsItem>
          <TabsItem>Tab 2</TabsItem>
          <TabsItem>Tab 3</TabsItem>
        </TabsItems>
        <TabsPanels>
          <TabsPanel>Panel 1</TabsPanel>
          <TabsPanel>Panel 2</TabsPanel>
          <TabsPanel>Panel 3</TabsPanel>
        </TabsPanels>
      </Tabs>
    </div>
  );
}
`,
  },
  ["tabs-vertical"]: {
    component: dynamic(
      () => import("@/foundations/ui/tabs/examples/tabs-vertical.preview")
    ),
    source: `import { CreditCard, Gear, Users } from "@phosphor-icons/react/dist/ssr";
import { Tabs, TabsItem, TabsItems, TabsPanel, TabsPanels } from "../tabs";

export default function TabsVerticalPreview() {
  return (
    <Tabs orientation="vertical" className="flex gap-4">
      <TabsItems className="w-60">
        <TabsItem className="w-full justify-start">
          <Users />
          <span>Users</span>
        </TabsItem>
        <TabsItem className="w-full justify-start">
          <CreditCard />
          <span>Billing</span>
        </TabsItem>
        <TabsItem className="w-full justify-start">
          <Gear />
          <span>Settings</span>
        </TabsItem>
      </TabsItems>
      <TabsPanels className="w-90">
        <TabsPanel>
          <h3 className="text-lg font-medium">Users Panel</h3>
          <p className="text-muted-foreground">Manage your users here.</p>
        </TabsPanel>
        <TabsPanel>
          <h3 className="text-lg font-medium">Billing Panel</h3>
          <p className="text-muted-foreground">
            Manage your billing information.
          </p>
        </TabsPanel>
        <TabsPanel>
          <h3 className="text-lg font-medium">Settings Panel</h3>
          <p className="text-muted-foreground">
            Configure your application settings.
          </p>
        </TabsPanel>
      </TabsPanels>
    </Tabs>
  );
}
`,
  },
  ["tabs"]: {
    component: dynamic(
      () => import("@/foundations/ui/tabs/examples/tabs.preview")
    ),
    source: `import { CreditCard, Gear, Users } from "@phosphor-icons/react/dist/ssr";
import { Tabs, TabsItem, TabsItems, TabsPanel, TabsPanels } from "../tabs";

export default function TabsPreview() {
  return (
    <Tabs>
      <TabsItems>
        <TabsItem>
          <Users />
          <span>Users</span>
        </TabsItem>
        <TabsItem>
          <CreditCard />
          <span>Billing</span>
        </TabsItem>
        <TabsItem>
          <Gear />
          <span>Settings</span>
        </TabsItem>
      </TabsItems>
      <TabsPanels>
        <TabsPanel>Panel 1</TabsPanel>
        <TabsPanel>Panel 2</TabsPanel>
        <TabsPanel>Panel 3</TabsPanel>
      </TabsPanels>
    </Tabs>
  );
}
`,
  },
  ["textarea-disabled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/textarea/examples/textarea-disabled.preview")
    ),
    source: `import { Textarea } from "../textarea";

export default function TextareaDisabledPreview() {
  return (
    <Textarea
      className="w-80"
      rows={5}
      disabled
      value="Once upon a time, in a distant galaxy, there lived a lonely star. Each day it would shine brightly, hoping to catch the attention of passing comets. One day, a beautiful comet noticed its radiant glow and decided to orbit nearby. From that day forward, the star was never lonely again."
    />
  );
}
`,
  },
  ["textarea-minimal"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/textarea/examples/textarea-minimal.preview")
    ),
    source: `import { Textarea } from "../textarea";

export default function TextareaMinimalPreview() {
  return (
    <Textarea
      className="w-80"
      variant="minimal"
      rows={5}
      placeholder="Write your next novel here"
    />
  );
}
`,
  },
  ["textarea-resize"]: {
    component: dynamic(
      () => import("@/foundations/ui/textarea/examples/textarea-resize.preview")
    ),
    source: `import { TextareaResize } from "../textarea";

export default function TextareaResizePreview() {
  return (
    <TextareaResize className="w-80" placeholder="Write your next novel here" />
  );
}
`,
  },
  ["textarea"]: {
    component: dynamic(
      () => import("@/foundations/ui/textarea/examples/textarea.preview")
    ),
    source: `import { Textarea } from "../textarea";

export default function TextareaPreview() {
  return (
    <Textarea
      className="w-80"
      rows={5}
      placeholder="Write your next novel here"
    />
  );
}
`,
  },
  ["tooltip-group"]: {
    component: dynamic(
      () => import("@/foundations/ui/tooltip/examples/tooltip-group.preview")
    ),
    source: `import { Clipboard, Scissors } from "@phosphor-icons/react/dist/ssr";
import { Button } from "../../button/button";
import { TooltipGroup, Tooltip } from "../tooltip";

export default function TooltipGroupPreview() {
  return (
    <div className="flex items-center gap-2">
      <TooltipGroup>
        <Tooltip content="Copy">
          <Button variant="outline" size="sm" square>
            <Clipboard />
          </Button>
        </Tooltip>
        <Tooltip content="Cut">
          <Button variant="outline" size="sm" square>
            <Scissors />
          </Button>
        </Tooltip>
      </TooltipGroup>
    </div>
  );
}
`,
  },
  ["tooltip-long-content"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/tooltip/examples/tooltip-long-content.preview")
    ),
    source: `import { Tooltip } from "../tooltip";

export default function TooltipLongContentPreview() {
  return (
    <Tooltip content="This is a very long tooltip content that demonstrates how tooltips handle lengthy text. The tooltip will automatically wrap the text to ensure it remains readable while maintaining a reasonable width.">
      <span>Hover me to see long content</span>
    </Tooltip>
  );
}
`,
  },
  ["tooltip-persist-click"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/tooltip/examples/tooltip-persist-click.preview"
        )
    ),
    source: `"use client";

import { useEffect, useState } from "react";
import { Tooltip } from "../tooltip";
import { Button } from "../../button/button";
import { Clipboard } from "@phosphor-icons/react";

export default function TooltipPersistClickPreview() {
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    let timeout: ReturnType<typeof setTimeout>;
    if (copied) {
      timeout = setTimeout(() => {
        setCopied(false);
      }, 2000);
    }

    return () => clearTimeout(timeout);
  }, [copied]);

  return (
    <Tooltip
      persistOnClick
      delayIn={0}
      content={copied ? "Copied!" : "Copy"}
      onOpenChange={(open) => {
        if (!open) setCopied(false);
      }}
    >
      <Button
        variant="outline"
        square
        size="sm"
        onClick={() => setCopied(true)}
        aria-label="Copy"
      >
        <Clipboard />
      </Button>
    </Tooltip>
  );
}
`,
  },
  ["tooltip-placement"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/tooltip/examples/tooltip-placement.preview")
    ),
    source: `import { Button } from "../../button/button";

import { Tooltip, TooltipGroup } from "../tooltip";

export default function TooltipPlacementPreview() {
  return (
    <div className="flex w-full flex-col gap-2 overflow-auto p-2">
      <TooltipGroup>
        <Tooltip content="Top" placement="top">
          <Button variant="outline" size="sm">
            Top
          </Button>
        </Tooltip>
        <Tooltip content="Right" placement="right">
          <Button variant="outline" size="sm">
            Right
          </Button>
        </Tooltip>
        <Tooltip content="Bottom" placement="bottom">
          <Button variant="outline" size="sm">
            Bottom
          </Button>
        </Tooltip>
        <Tooltip content="Left" placement="left">
          <Button variant="outline" size="sm">
            Left
          </Button>
        </Tooltip>
        <Tooltip content="Top Start" placement="top-start">
          <Button variant="outline" size="sm">
            Top Start
          </Button>
        </Tooltip>
        <Tooltip content="Top End" placement="top-end">
          <Button variant="outline" size="sm">
            Top End
          </Button>
        </Tooltip>
        <Tooltip content="Right Start" placement="right-start">
          <Button variant="outline" size="sm">
            Right Start
          </Button>
        </Tooltip>
        <Tooltip content="Right End" placement="right-end">
          <Button variant="outline" size="sm">
            Right End
          </Button>
        </Tooltip>
        <Tooltip content="Bottom Start" placement="bottom-start">
          <Button variant="outline" size="sm">
            Bottom Start
          </Button>
        </Tooltip>
        <Tooltip content="Bottom End" placement="bottom-end">
          <Button variant="outline" size="sm">
            Bottom End
          </Button>
        </Tooltip>
        <Tooltip content="Left Start" placement="left-start">
          <Button variant="outline" size="sm">
            Left Start
          </Button>
        </Tooltip>
        <Tooltip content="Left End" placement="left-end">
          <Button variant="outline" size="sm">
            Left End
          </Button>
        </Tooltip>
      </TooltipGroup>
    </div>
  );
}
`,
  },
  ["tooltip-rich-content"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/tooltip/examples/tooltip-rich-content.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../../avatar/avatar";
import { Tooltip } from "../tooltip";

export default function TooltipRichContentPreview() {
  return (
    <Tooltip
      content={
        <div className="flex items-center gap-1.5">
          <Avatar
            variant="square"
            size="sm"
            className="-ml-1.5 backdrop-blur-none"
          >
            <AvatarImage src="https://github.com/pdrbrnd.png" />
            <AvatarFallback>Pedro Brandão</AvatarFallback>
          </Avatar>
          <div className="flex flex-col">
            <span>Pedro Brandão</span>
            <span className="text-foreground-secondary">Significa</span>
          </div>
        </div>
      }
    >
      <span>Hover to see rich content</span>
    </Tooltip>
  );
}
`,
  },
  ["tooltip-scroll"]: {
    component: dynamic(
      () => import("@/foundations/ui/tooltip/examples/tooltip-scroll.preview")
    ),
    source: `import { Tooltip } from "../tooltip";

export default function TooltipScrollPreview() {
  return (
    <div className="h-full w-full overflow-y-auto">
      <div className="flex h-[200vh] items-center justify-center">
        <Tooltip content="Tooltip content" open>
          Scroll to see the tooltip reposition itself
        </Tooltip>
      </div>
    </div>
  );
}
`,
  },
  ["tooltip"]: {
    component: dynamic(
      () => import("@/foundations/ui/tooltip/examples/tooltip.preview")
    ),
    source: `import { Tooltip } from "../tooltip";

export default function TooltipPreview() {
  return <Tooltip content="Or is there?">Nothing to see here</Tooltip>;
}
`,
  },
};
