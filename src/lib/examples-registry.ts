// DO NOT EDIT. This file is automatically generated by the generate-imports script.

import dynamic from "next/dynamic";
import { ComponentType } from "react";

type Import = {
  component: ComponentType;
  source: string;
};

export const imports: Record<string, Import> = {
  ["instance-counter-stepper"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/instance-counter/examples/instance-counter-stepper.preview"
        )
    ),
    source: `"use client";

import { createContext, ReactNode, use, useState } from "react";
import { Button } from "@/foundations/ui/button/button";
import {
  InstanceCounterProvider,
  useInstanceCounter,
} from "@/foundations/components/instance-counter/instance-counter";

const ITEMS = ["ü•ö", "üê£", "üê•", "üêì"];

const StepperContext = createContext(0);

const Stepper = ({ children }: { children: ReactNode }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [length, setLength] = useState(0);

  return (
    <InstanceCounterProvider onChange={setLength}>
      <StepperContext value={currentIndex}>
        <div className="border-border flex flex-col gap-4 rounded-lg border p-4">
          <div className="flex gap-2">
            <Button
              className="grow"
              size="sm"
              onClick={() => setCurrentIndex((c) => (c - 1 + length) % length)}
            >
              ‚Üê
            </Button>
            <Button
              className="grow"
              size="sm"
              onClick={() => setCurrentIndex((c) => (c + 1) % length)}
            >
              ‚Üí
            </Button>
          </div>
          <div className="bg-background-secondary border-border rounded-lg border p-8 text-center min-w-48">
            {children}
          </div>
        </div>
      </StepperContext>
    </InstanceCounterProvider>
  );
};

const StepperItem = ({ children }: { children: ReactNode }) => {
  const currentIndex = use(StepperContext);
  const index = useInstanceCounter();
  const isActive = index === currentIndex;

  return <>{isActive && children}</>;
};

const InstanceCounterStepper = () => {
  return (
    <Stepper>
      {ITEMS.map((item, index) => (
        <StepperItem key={index}>
          <div className="text-[32px]">{item}</div>
        </StepperItem>
      ))}
    </Stepper>
  );
};

export default InstanceCounterStepper;
`,
  },
  ["instance-counter"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/instance-counter/examples/instance-counter.preview"
        )
    ),
    source: `"use client";

import {
  InstanceCounterProvider,
  useInstanceCounter,
} from "@/foundations/components/instance-counter/instance-counter";
import { useState } from "react";
import { Button } from "@/foundations/ui/button/button";

const Item = () => {
  const index = useInstanceCounter();

  return (
    <div className="bg-background-secondary my-2 w-fit rounded-md px-2 py-1 text-xs">
      Instance Index: {index}
    </div>
  );
};

const InstanceCounterPreview = () => {
  const [mount, setMount] = useState(false);
  const [length, setLength] = useState(0);

  return (
    <InstanceCounterProvider onChange={setLength}>
      <div className="flex min-h-88 flex-col gap-4">
        <div className="text-foreground-secondary text-sm">
          Number of Instances: {length}
        </div>
        <Button size="sm" onClick={() => setMount(!mount)}>
          Trigger Tree Change
        </Button>
        <div className="border-border rounded-lg border px-4 py-2 [&_*_*]:ml-4">
          <Item />
          <div>
            <Item />
            {mount && <Item />}
            <div>
              <div>
                <Item />
                <div>
                  <Item />
                  <div>
                    <div>
                      <div>
                        <Item />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <Item />
        </div>
      </div>
    </InstanceCounterProvider>
  );
};

export default InstanceCounterPreview;
`,
  },
  ["sequence-as-child"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/sequence/examples/sequence-as-child.preview"
        )
    ),
    source: `"use client";

import { Button } from "@/foundations/ui/button/button";
import { useState } from "react";
import {
  Sequence,
  SequenceItem,
  SequenceItems,
  SequencePanel,
  SequencePanels,
} from "../sequence";
import { eras as CONTENT } from "./content";

const SequencePreview = () => {
  const [selectedIndex, setSelectedIndex] = useState<number>(0);

  return (
    <Sequence
      className="relative w-160"
      loop
      onChange={(index) => setSelectedIndex(index)}
      duration={3000}
    >
      <SequenceItems className="flex gap-2 overflow-y-auto py-2">
        {CONTENT.map((item, index) => (
          <SequenceItem key={index} asChild>
            <Button
              size="sm"
              variant={selectedIndex === index ? "primary" : "outline"}
            >
              <item.icon size={16} className="-ml-1 shrink-0" />
              {item.title}
            </Button>
          </SequenceItem>
        ))}
      </SequenceItems>
      <SequencePanels className="relative h-64 w-full">
        {CONTENT.map((item, index) => (
          <SequencePanel key={index}>
            <div className="border-border absolute top-0 left-0 flex h-full min-h-64 flex-col justify-between rounded-lg border p-4">
              <div className="text-foreground-secondary font-mono text-sm uppercase">
                {item.title}
              </div>
              <div className="pr-8 text-xl font-medium text-pretty">
                {item.description}
              </div>
            </div>
          </SequencePanel>
        ))}
      </SequencePanels>
    </Sequence>
  );
};

export default SequencePreview;
`,
  },
  ["sequence-controlled"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/sequence/examples/sequence-controlled.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";

import { cn } from "@/lib/utils";
import { Button } from "@/foundations/ui/button/button";
import {
  Sequence,
  SequenceItem,
  SequenceItems,
  SequencePanel,
  SequencePanels,
} from "../sequence";
import { eras as CONTENT } from "./content";

const SequenceControlled = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  return (
    <div>
      <div className="py-2">
        <Button
          size="sm"
          onClick={() => setCurrentIndex((prev) => (prev + 1) % CONTENT.length)}
        >
          Next
        </Button>
      </div>
      <Sequence
        className="relative w-160"
        loop
        duration={3000}
        currentIndex={currentIndex}
        onChange={setCurrentIndex}
      >
        <SequenceItems className="flex gap-2 overflow-y-auto py-2">
          {CONTENT.map((item, index) => (
            <SequenceItem
              key={index}
              className={cn(
                "border-background-secondary relative shrink-0 cursor-pointer overflow-hidden rounded-lg border px-4 py-1 text-sm",
                "flex items-center gap-1.5 whitespace-nowrap",
                "hover:bg-background-secondary/30 transition-colors",
                'before:bg-background-secondary before:absolute before:inset-0 before:-z-10 before:content-[""]',
                "before:origin-left before:scale-x-[var(--progress)]"
              )}
            >
              <item.icon size={16} className="-ml-1 shrink-0" />
              {item.title}
            </SequenceItem>
          ))}
        </SequenceItems>
        <SequencePanels className="relative h-64 w-full">
          {CONTENT.map((item, index) => (
            <SequencePanel key={index}>
              <div className="border-border absolute top-0 left-0 flex h-full min-h-64 flex-col justify-between rounded-lg border p-4">
                <div className="text-foreground-secondary font-mono text-sm uppercase">
                  {item.title}
                </div>
                <div className="pr-8 text-xl font-medium text-pretty">
                  {item.description}
                </div>
              </div>
            </SequencePanel>
          ))}
        </SequencePanels>
      </Sequence>
    </div>
  );
};

export default SequenceControlled;
`,
  },
  ["sequence-motion"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/sequence/examples/sequence-motion.preview"
        )
    ),
    source: `"use client";

import { cn } from "@/lib/utils";
import {
  Sequence,
  SequenceItem,
  SequenceItems,
  SequencePanel,
  SequencePanels,
} from "@/foundations/components/sequence/sequence";
import { motion, AnimatePresence } from "motion/react";
import { useState } from "react";

import { eras as CONTENT } from "./content";

const SequenceMotion = () => {
  const [selectedIndex, setSelectedIndex] = useState<number>(0);

  return (
    <Sequence
      loop
      className="w-160"
      onChange={(index) => setSelectedIndex(index)}
      duration={3000}
    >
      <SequenceItems className="flex w-full gap-2">
        {CONTENT.map((item, index) => (
          <SequenceItem
            key={index}
            className={cn(
              "border-background-secondary relative shrink-0 cursor-pointer overflow-hidden rounded-lg border px-4 py-1 text-sm",
              "flex items-center gap-1.5 whitespace-nowrap",
              "hover:bg-background-secondary/30 transition-colors",
              'before:bg-background-secondary before:absolute before:inset-0 before:-z-10 before:content-[""]',
              "before:origin-left before:scale-x-[var(--progress)]"
            )}
          >
            <item.icon size={16} className="-ml-1 shrink-0" />
            {item.title}
          </SequenceItem>
        ))}
      </SequenceItems>

      <SequencePanels className="mt-4 grid overflow-hidden">
        <AnimatePresence mode="wait" initial={false}>
          {CONTENT.map((item, index) =>
            index === selectedIndex ? (
              <motion.div
                key={index}
                className="col-start-1 row-start-1"
                initial={{ scale: 0.95 }}
                animate={{ scale: 1 }}
                exit={{ scale: 0.95 }}
                transition={{ duration: 0.125 }}
              >
                <SequencePanel forceMount>
                  <div className="border-border flex h-full min-h-64 flex-col justify-between rounded-lg border p-4">
                    <motion.div
                      className="text-foreground-secondary font-mono text-sm uppercase"
                      initial={{ opacity: 0, y: "50%" }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{
                        duration: 1.5,
                        delay: 0.15,
                        ease: [0.19, 1.0, 0.22, 1.0],
                      }}
                    >
                      {item.title}
                    </motion.div>
                    <motion.div
                      className="pr-8 text-xl font-medium text-pretty"
                      initial={{ opacity: 0, y: "50%" }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{
                        duration: 1.5,
                        delay: 0.15,
                        ease: [0.19, 1.0, 0.22, 1.0],
                      }}
                    >
                      {item.description}
                    </motion.div>
                  </div>
                </SequencePanel>
              </motion.div>
            ) : (
              <SequencePanel key={index + "placeholder"} />
            )
          )}
        </AnimatePresence>
      </SequencePanels>
    </Sequence>
  );
};

export default SequenceMotion;
`,
  },
  ["sequence-pause-hover"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/sequence/examples/sequence-pause-hover.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";

import { cn } from "@/lib/utils";
import {
  Sequence,
  SequenceItem,
  SequenceItems,
  SequencePanel,
  SequencePanels,
} from "../sequence";
import { eras as CONTENT } from "./content";

const SequencePauseHover = () => {
  const [paused, setPaused] = useState(false);

  return (
    <Sequence className="relative w-160" loop paused={paused} duration={3000}>
      <SequenceItems
        className="flex gap-2 overflow-y-auto py-2"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {CONTENT.map((item, index) => (
          <SequenceItem
            key={index}
            className={cn(
              "border-background-secondary relative shrink-0 cursor-pointer overflow-hidden rounded-lg border px-4 py-1 text-sm",
              "flex items-center gap-1.5 whitespace-nowrap",
              "hover:bg-background-secondary/30 transition-colors",
              'before:bg-background-secondary before:absolute before:inset-0 before:-z-10 before:content-[""]',
              "before:origin-left before:scale-x-[var(--progress)]"
            )}
          >
            <item.icon size={16} className="-ml-1 shrink-0" />
            {item.title}
          </SequenceItem>
        ))}
      </SequenceItems>
      <SequencePanels className="relative h-64 w-full">
        {CONTENT.map((item, index) => (
          <SequencePanel key={index}>
            <div className="border-border absolute top-0 left-0 flex h-full min-h-64 flex-col justify-between rounded-lg border p-4">
              <div className="text-foreground-secondary font-mono text-sm uppercase">
                {item.title}
              </div>
              <div className="pr-8 text-xl font-medium text-pretty">
                {item.description}
              </div>
            </div>
          </SequencePanel>
        ))}
      </SequencePanels>
    </Sequence>
  );
};

export default SequencePauseHover;
`,
  },
  ["sequence-scroll-into-view"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/sequence/examples/sequence-scroll-into-view.preview"
        )
    ),
    source: `"use client";

import { useRef } from "react";

import { cn } from "@/lib/utils";
import { scrollIntoViewIfNeeded } from "@/foundations/utils/dom/scroll-into-view-if-needed";
import {
  Sequence,
  SequenceItem,
  SequencePanel,
  SequencePanels,
  SequenceItems,
} from "../sequence";
import { erasExtended as CONTENT } from "./content";

const SequenceScrollIntoView = () => {
  const itemsScrollContainerRef = useRef<HTMLDivElement>(null);

  return (
    <Sequence
      className="relative max-w-[min(90vw,640px)]"
      loop
      duration={3000}
      onChange={(index) => {
        if (itemsScrollContainerRef.current) {
          const item = itemsScrollContainerRef.current.children[index];

          if (item) {
            scrollIntoViewIfNeeded(
              itemsScrollContainerRef.current,
              item as HTMLElement,
              {
                behavior: "smooth",
              }
            );
          }
        }
      }}
    >
      <SequenceItems asChild>
        <div
          ref={itemsScrollContainerRef}
          className="flex gap-2 overflow-y-auto py-2"
        >
          {CONTENT.map((item, index) => (
            <SequenceItem
              key={index}
              className={cn(
                "border-background-secondary relative shrink-0 cursor-pointer overflow-hidden rounded-lg border px-4 py-1 text-sm",
                "flex items-center gap-1.5 whitespace-nowrap",
                "hover:bg-background-secondary/30 transition-colors",
                'before:bg-background-secondary before:absolute before:inset-0 before:-z-10 before:content-[""]',
                "before:origin-left before:scale-x-[var(--progress)]"
              )}
            >
              <item.icon size={16} className="-ml-1 shrink-0" />
              {item.title}
            </SequenceItem>
          ))}
        </div>
      </SequenceItems>
      <SequencePanels className="relative h-64 w-full">
        {CONTENT.map((item, index) => (
          <SequencePanel key={index}>
            <div className="border-border absolute top-0 left-0 flex h-full min-h-64 flex-col justify-between rounded-lg border p-4">
              <div className="text-foreground-secondary font-mono text-sm uppercase">
                {item.title}
              </div>
              <div className="pr-8 text-xl font-medium text-pretty">
                {item.description}
              </div>
            </div>
          </SequencePanel>
        ))}
      </SequencePanels>
    </Sequence>
  );
};

export default SequenceScrollIntoView;
`,
  },
  ["sequence-vertical"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/sequence/examples/sequence-vertical.preview"
        )
    ),
    source: `"use client";

import { cn } from "@/lib/utils";
import {
  Sequence,
  SequenceItem,
  SequenceItems,
  SequencePanel,
  SequencePanels,
} from "@/foundations/components/sequence/sequence";
import { eras as CONTENT } from "./content";

const SequenceVertical = () => {
  return (
    <Sequence
      orientation="vertical"
      loop
      className="flex max-w-128 gap-10"
      duration={3000}
    >
      <div className="flex gap-2">
        <div
          className={cn(
            "flex h-8 items-center transition-transform duration-300 ease-out",
            "translate-y-[calc(var(--index)*100%)]"
          )}
        >
          <div
            className={cn(
              "text-foreground relative h-3 w-3 rounded-full",
              "before:bg-foreground/10 before:absolute before:inset-0",
              "before:rounded-full before:content-['']"
            )}
            style={{
              "--fill": "calc(var(--progress) * 100%)",
              background: \`conic-gradient(from 0deg at 50% 50%, currentColor var(--fill), transparent var(--fill))\`,
            }}
          />
        </div>
        <SequenceItems>
          {CONTENT.map((item, index) => (
            <SequenceItem
              key={index}
              value={index.toString()}
              className={cn(
                "block h-8 text-left text-base font-medium",
                "text-foreground-secondary data-[selected=true]:text-foreground",
                "hover:text-foreground/60 active:text-foreground/80 cursor-pointer"
              )}
            >
              {item.title}
            </SequenceItem>
          ))}
        </SequenceItems>
      </div>
      <SequencePanels className="min-h-64">
        {CONTENT.map((item, index) => (
          <SequencePanel key={index} className="text-xl font-medium">
            {item.description}
          </SequencePanel>
        ))}
      </SequencePanels>
    </Sequence>
  );
};

export default SequenceVertical;
`,
  },
  ["sequence"]: {
    component: dynamic(
      () =>
        import("@/foundations/components/sequence/examples/sequence.preview")
    ),
    source: `"use client";

import { cn } from "@/lib/utils";
import {
  Sequence,
  SequenceItem,
  SequenceItems,
  SequencePanel,
  SequencePanels,
} from "../sequence";
import { eras as CONTENT } from "./content";

const SequencePreview = () => {
  return (
    <Sequence className="relative w-160" loop duration={3000}>
      <SequenceItems className="flex gap-2 overflow-y-auto py-2">
        {CONTENT.map((item, index) => (
          <SequenceItem
            key={index}
            className={cn(
              "border-background-secondary relative shrink-0 cursor-pointer overflow-hidden rounded-lg border px-4 py-1 text-sm",
              "flex items-center gap-1.5 whitespace-nowrap",
              "hover:bg-background-secondary/30 transition-colors",
              'before:bg-background-secondary before:absolute before:inset-0 before:-z-10 before:content-[""]',
              "before:origin-left before:scale-x-[var(--progress)]"
            )}
          >
            <item.icon size={16} className="-ml-1 shrink-0" />
            {item.title}
          </SequenceItem>
        ))}
      </SequenceItems>
      <SequencePanels className="relative h-64 w-full">
        {CONTENT.map((item, index) => (
          <SequencePanel key={index}>
            <div className="border-border absolute top-0 left-0 flex h-full min-h-64 flex-col justify-between rounded-lg border p-4">
              <div className="text-foreground-secondary font-mono text-sm uppercase">
                {item.title}
              </div>
              <div className="pr-8 text-xl font-medium text-pretty">
                {item.description}
              </div>
            </div>
          </SequencePanel>
        ))}
      </SequencePanels>
    </Sequence>
  );
};

export default SequencePreview;
`,
  },
  ["stack-stick-position"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/stack/examples/stack-stick-position.preview"
        )
    ),
    source: `"use client";

import { Divider } from "@/foundations/ui/divider/divider";
import { MouseScroll } from "@phosphor-icons/react";
import {
  Stack,
  StackHeader,
  StackItem,
} from "@/foundations/components/stack/stack";

const StackStickPositionPreview = () => {
  return (
    <div className="relative grid grid-cols-2 gap-8 py-[100vh]">
      <div className="text-foreground-secondary absolute top-[50vh] flex w-full items-center justify-center gap-1">
        <MouseScroll />
        Scroll down
      </div>
      <div className="text-foreground-secondary absolute bottom-[50vh] flex w-full items-center justify-center gap-1">
        <MouseScroll />
        Scroll up
      </div>
      <div>
        <Stack stick="top">
          {[1, 2, 3].map((num) => (
            <StackItem key={num} className="bg-background px-4">
              <StackHeader>
                <div className="py-2 font-medium">Section {num}</div>
                <Divider />
              </StackHeader>
              <div className="text-foreground-secondary py-2">
                This section demonstrates the default top sticky behavior where
                headers stick to the top of the viewport as you scroll down.
              </div>
            </StackItem>
          ))}
        </Stack>
      </div>

      <div>
        <Stack stick="bottom">
          {[1, 2, 3].map((num) => (
            <StackItem key={num} className="bg-background px-4">
              <StackHeader>
                <div className="py-2 font-medium">Section {num}</div>
                <Divider />
              </StackHeader>
              <div className="text-foreground-secondary py-2">
                This section shows how headers can stick to the bottom of the
                viewport when using stick=bottom. This is useful for bottom-up
                navigation patterns.
              </div>
            </StackItem>
          ))}
        </Stack>
      </div>
    </div>
  );
};

export default StackStickPositionPreview;
`,
  },
  ["stack-vs-sticky"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/components/stack/examples/stack-vs-sticky.preview"
        )
    ),
    source: `"use client";

import { Divider } from "@/foundations/ui/divider/divider";
import {
  Stack,
  StackHeader,
  StackItem,
} from "@/foundations/components/stack/stack";
import { Pizza, Leaf, Fire } from "@phosphor-icons/react";

import { cn } from "@/lib/utils";

const items = [
  {
    title: "Pizza Toppings",
    icon: Pizza,
    content:
      "The perfect pizza starts with quality ingredients. From fresh mozzarella to hand-crushed tomatoes, every topping should be carefully selected and balanced.",
  },
  {
    title: "Dough Secrets",
    icon: Leaf,
    content:
      "The key to great pizza dough is patience. Let it ferment slowly in the fridge for 24-72 hours to develop complex flavors and the perfect texture.",
  },
  {
    title: "Baking Tips",
    icon: Fire,
    content:
      "A blazing hot oven is crucial for pizza perfection. Preheat your oven to its highest setting with a pizza stone inside for at least an hour before baking.",
  },
];

const StackVsStickyPreview = () => {
  return (
    <div className="grid grid-cols-2 gap-8 pt-[50vh] pb-[100vh]">
      <div>
        <h2 className="mb-8 px-4 text-lg font-medium">Stack Implementation</h2>
        <Stack stick="top">
          {items.map((item, index) => (
            <StackItem key={index} className="bg-background px-4">
              <StackHeader className="text-xl">
                <div className="flex items-center gap-3">
                  <item.icon className="size-6" />
                  <h3 className="py-2">{item.title}</h3>
                </div>
                <Divider />
              </StackHeader>
              <div className="text-foreground-secondary text-md pt-4 pb-12">
                {item.content}
              </div>
            </StackItem>
          ))}
        </Stack>
      </div>

      <div>
        <h2 className="mb-8 px-4 text-lg font-medium">Position: Sticky</h2>
        <div>
          {items.map((item, index) => (
            <div
              key={index}
              className={cn(
                "bg-background sticky top-0",
                index === 0 && "top-0",
                index === 1 && "top-12",
                index === 2 && "top-24"
              )}
            >
              <div className="bg-background h-12 px-4">
                <div className="flex h-12 items-center gap-3 text-xl">
                  <item.icon className="size-6" />
                  <h3 className="py-2">{item.title}</h3>
                </div>
                <Divider />
              </div>
              <div className="text-foreground-secondary text-md pt-4 pb-12">
                {item.content}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default StackVsStickyPreview;
`,
  },
  ["stack"]: {
    component: dynamic(
      () => import("@/foundations/components/stack/examples/stack.preview")
    ),
    source: `"use client";

import { Divider } from "@/foundations/ui/divider/divider";
import { BookOpen, Lightbulb, Wrench } from "@phosphor-icons/react";
import {
  Stack,
  StackHeader,
  StackItem,
} from "@/foundations/components/stack/stack";

const items = [
  {
    title: "Getting Started",
    icon: BookOpen,
    content:
      "The Stack component helps create scrollable sections with sticky headers. It's particularly useful for long-form content or documentation where you want to maintain context while scrolling.",
  },
  {
    title: "Key Features",
    icon: Lightbulb,
    content:
      "Smooth sticky header transitions, configurable alignment (top/bottom), and automatic content height calculations make this component highly versatile.",
  },
  {
    title: "Implementation",
    icon: Wrench,
    content:
      "To use the Stack component, wrap your content sections in StackItem components and include StackHeader components for the sticky headers. The Stack parent component manages all the positioning and scroll behavior automatically. You can customize the appearance using standard CSS classes and configure the stick behavior using the 'stick' prop.",
  },
];

const StackPreview = () => {
  return (
    <div className="pt-[70vh] pb-[70vh]">
      <Stack stick="top">
        {items.map((item, index) => (
          <StackItem key={index} className="bg-background px-4">
            <StackHeader className="text-xl">
              <div className="flex items-center gap-3">
                <item.icon className="size-6" />
                <h3 className="py-2">{item.title}</h3>
              </div>
              <Divider />
            </StackHeader>

            <div className="text-foreground-secondary text-md w-2/3 pt-4 pb-12">
              {item.content}
            </div>
          </StackItem>
        ))}
      </Stack>
    </div>
  );
};

export default StackPreview;
`,
  },
  ["accessible-forms"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/guides/accessible-forms/examples/accessible-forms.preview"
        )
    ),
    source: `"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { Button } from "@/foundations/ui/button/button";

import { Field } from "../field";
import { FieldDescription } from "../field-description";
import { FieldError } from "../field-error";

import {
  Fieldset,
  Legend,
} from "@/foundations/guides/accessible-forms/fieldset";
import { Label } from "./label";
import { Input } from "./input";
import { Select } from "./select";
import { Textarea } from "./textarea";
import { Radio, RadioGroup } from "./radio";
import { Checkbox } from "./checkbox";

const schema = z.object({
  company: z.string().optional(),
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email").min(1, "Email is required"),
  country: z.string().min(1, "Please select a country"),
  message: z.string().optional(),
  preference: z.enum(["email", "phone"], {
    errorMap: () => ({ message: "Please select a preference" }),
  }),
  newsletter: z.boolean(),
  terms: z.literal(true, {
    errorMap: () => ({ message: "Please accept the terms and conditions" }),
  }),
});

type FormData = z.infer<typeof schema>;

export default function FieldPreview() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    mode: "onBlur",
  });

  const onSubmit = (data: FormData) => {
    alert(JSON.stringify(data, null, 2));
  };

  return (
    <div className="mx-auto max-w-md p-10">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        <Fieldset>
          <Legend>Personal information</Legend>

          <Field className="flex flex-col gap-2">
            <Label>Company</Label>
            <Input {...register("company")} />
          </Field>

          <Field className="flex flex-col gap-2">
            <div>
              <Label>Name</Label>
              <FieldDescription>
                This is a description very very long description
              </FieldDescription>
            </div>
            <Input {...register("name", { required: true })} />
            <FieldError>{errors.name?.message}</FieldError>
          </Field>

          <Field className="flex flex-col gap-2">
            <div>
              <Label>Email</Label>
              <FieldDescription>Your work e-mail address</FieldDescription>
            </div>
            <Input type="email" {...register("email", { required: true })} />
            <FieldDescription>
              Your work e-mail address is preferred because it is more secure.
              Please ask your administrator to whitelist the significa.co
              domain.
            </FieldDescription>
            <FieldError>{errors.email?.message}</FieldError>
          </Field>

          <Field className="flex flex-col gap-2">
            <div>
              <Label>Country</Label>
              <FieldDescription>
                Your country is required to continue with the registration.
              </FieldDescription>
            </div>
            <Select {...register("country")}>
              <option value="" disabled>
                Select a country
              </option>
              {["United States", "Canada", "United Kingdom", "Australia"].map(
                (country) => (
                  <option key={country} value={country}>
                    {country}
                  </option>
                )
              )}
            </Select>
            <FieldError>{errors.country?.message}</FieldError>
          </Field>

          <Field className="flex flex-col gap-2">
            <Label>Message</Label>
            <Textarea {...register("message")} />
            <FieldError>{errors.message?.message}</FieldError>
          </Field>
        </Fieldset>

        <Fieldset>
          <Legend>Communication</Legend>

          <Field className="flex flex-col gap-2">
            <Label>Contact preference</Label>

            <RadioGroup required className="flex flex-col gap-2">
              <Field className="flex items-center gap-2">
                <Radio
                  {...register("preference", { required: true })}
                  value="email"
                />
                <Label>Email</Label>
              </Field>
              <Field className="flex items-center gap-2">
                <Radio
                  {...register("preference", { required: true })}
                  value="phone"
                />
                <Label>Phone</Label>
              </Field>
            </RadioGroup>

            <FieldError />
          </Field>

          <div className="space-y-2">
            <Field className="flex flex-col gap-2">
              <div className="flex items-center gap-2">
                <Checkbox {...register("terms", { required: true })} />
                <Label>Accept terms and conditions</Label>
              </div>
              <FieldError>{errors.terms?.message}</FieldError>
            </Field>

            <Field className="flex flex-col gap-2">
              <div className="flex items-center gap-2">
                <Checkbox {...register("newsletter")} />
                <Label>Subscribe to newsletter</Label>
              </div>
              <FieldError>{errors.newsletter?.message}</FieldError>
            </Field>
          </div>
        </Fieldset>

        <Button type="submit">Submit</Button>
      </form>
    </div>
  );
}
`,
  },
  ["use-ticker-canvas-animation"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/hooks/use-ticker/examples/use-ticker-canvas-animation.preview"
        )
    ),
    source: `"use client";

import { useCallback, useEffect, useRef } from "react";
import { Play, Square, ArrowCounterClockwise } from "@phosphor-icons/react";

import { useTicker } from "@/foundations/hooks/use-ticker/use-ticker";
import { Button } from "@/foundations/ui/button/button";

const UseTickerCanvasAnimation = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const timeElapsed = useRef(0);

  const ticker = useTicker((timestamp, delta) => {
    timeElapsed.current += delta;

    if (canvasRef.current) {
      renderFrame(canvasRef.current, timeElapsed.current);
    }
  });

  const reset = useCallback(() => {
    timeElapsed.current = 0;

    if (canvasRef.current) {
      renderFrame(canvasRef.current, timeElapsed.current, true);
    }
  }, []);

  useEffect(() => {
    reset();
  }, [reset]);

  return (
    <div className="absolute inset-0 grid place-items-center">
      <div className="absolute top-2 left-2 flex gap-2 z-10 justify-start">
        <Button onClick={ticker.start} size="sm">
          <Play size={16} />
          Start
        </Button>
        <Button variant="outline" onClick={ticker.stop} size="sm">
          <Square size={16} />
          Stop
        </Button>
        <Button variant="outline" onClick={reset} size="sm">
          <ArrowCounterClockwise size={16} />
          Reset
        </Button>
      </div>
      <canvas
        ref={canvasRef}
        width={640}
        height={480}
        className="absolute h-full mix-blend-multiply"
      />
    </div>
  );
};

function renderFrame(
  canvas: HTMLCanvasElement,
  progress: number,
  clearCanvas?: boolean
) {
  const context = canvas.getContext("2d");
  if (!context) return;

  const angle = (progress * 0.002) % Math.PI;

  const { width, height } = canvas;
  const radius = 24;
  const y = 1 - Math.sin(angle) * 0.8;

  if (clearCanvas) {
    context.clearRect(0, 0, width, height);
  }

  // cover canvas with white at 0.33 alpha to get the trailing effect
  context.beginPath();
  context.rect(0, 0, width, height);
  context.fillStyle = "rgba(255, 255, 255, 0.33)";
  context.fill();

  // draw circle
  context.beginPath();
  context.arc(
    0.5 * width,
    radius + y * (height - 2 * radius),
    radius,
    0,
    Math.PI * 2
  );
  context.fillStyle = "#222";
  context.fill();
}

export default UseTickerCanvasAnimation;
`,
  },
  ["avatar-broken-image"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/avatar/examples/avatar-broken-image.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../avatar";

export default function AvatarBrokenImagePreview() {
  return (
    <Avatar>
      <AvatarImage src="broken-image-url" />
      <AvatarFallback>Pedro Brand√£o</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["avatar-custom-color"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/avatar/examples/avatar-custom-color.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarCustomColorPreview() {
  return (
    <Avatar className="bg-emerald-500/20">
      <AvatarFallback>Pedro Brand√£o</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["avatar-fallback"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar-fallback.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarFallbackPreview() {
  return (
    <div className="flex flex-wrap gap-2">
      {/* Full name */}
      <Avatar>
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      {/* One word */}
      <Avatar>
        <AvatarFallback>Significa</AvatarFallback>
      </Avatar>
      {/* Initials */}
      <Avatar>
        <AvatarFallback>PB</AvatarFallback>
      </Avatar>
      {/* No fallback */}
      <Avatar>
        <AvatarFallback />
      </Avatar>
    </div>
  );
}
`,
  },
  ["avatar-on-top-of-media"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/avatar/examples/avatar-on-top-of-media.preview"
        )
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarOnTopOfMediaPreview() {
  return (
    <div
      className="relative size-32 overflow-hidden rounded-lg bg-cover bg-center"
      style={{
        backgroundImage:
          "url(https://images.unsplash.com/photo-1682687220742-aba13b6e50ba?q=80)",
      }}
    >
      <div className="flex h-full items-center justify-center">
        <Avatar>
          <AvatarFallback>Pedro Brand√£o</AvatarFallback>
        </Avatar>
      </div>
    </div>
  );
}
`,
  },
  ["avatar-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar-sizes.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Avatar size="2xs">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="xs">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="sm">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="md">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="lg">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="xl">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="2xl">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
      <Avatar size="3xl">
        <AvatarFallback>Pedro Brand√£o</AvatarFallback>
      </Avatar>
    </div>
  );
}
`,
  },
  ["avatar"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../avatar";

export default function AvatarPreview() {
  return (
    <Avatar>
      <AvatarImage src="https://github.com/pdrbrnd.png" />
      <AvatarFallback>Pedro Brand√£o</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["badge-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge-sizes.preview")
    ),
    source: `import { Badge } from "../badge";

export default function BadgeSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Badge size="xs">Extra small</Badge>
      <Badge size="sm">Small</Badge>
      <Badge size="md">Medium</Badge>
    </div>
  );
}
`,
  },
  ["badge-variants"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge-variants.preview")
    ),
    source: `import { Badge } from "../badge";

export default function BadgeVariantsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Badge variant="neutral">Neutral</Badge>
      <Badge variant="success">Success</Badge>
      <Badge variant="error">Error</Badge>
      <Badge variant="warning">Warning</Badge>
      <Badge variant="info">Info</Badge>
    </div>
  );
}
`,
  },
  ["badge"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge.preview")
    ),
    source: `import { Package } from "@phosphor-icons/react/dist/ssr";
import { Badge, BadgeIcon, BadgeStatus } from "../badge";

export default function BadgePreview() {
  return (
    <Badge>
      <BadgeIcon>
        <Package />
      </BadgeIcon>
      <span>Up to date</span>
      <BadgeStatus className="bg-emerald-500" />
    </Badge>
  );
}
`,
  },
  ["button-as-link"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-as-link.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import { ArrowSquareOut, Package } from "@phosphor-icons/react/dist/ssr";

export default function ButtonLinkPreview() {
  return (
    <Button variant="outline" asChild>
      <a href="https://significa.co" target="_blank">
        <Package />
        <span>Significa website</span>
        <ArrowSquareOut />
      </a>
    </Button>
  );
}
`,
  },
  ["button-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-disabled.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonDisabledPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button disabled variant="primary">
        Primary
      </Button>
      <Button disabled variant="outline">
        Outline
      </Button>
      <Button disabled variant="ghost">
        Ghost
      </Button>
      <Button disabled variant="destructive">
        Destructive
      </Button>
    </div>
  );
}
`,
  },
  ["button-icons"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-icons.preview")
    ),
    source: `import {
  ArrowSquareOut,
  Package,
  Pencil,
  Sun,
} from "@phosphor-icons/react/dist/ssr";
import { Button } from "../button";

export default function ButtonIconsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button variant="outline" square aria-label="Switch theme">
        <Sun />
      </Button>
      <Button variant="outline">
        <Pencil />
        <span>Edit</span>
      </Button>
      <Button variant="outline">
        <Package />
        <span>External link</span>
        <ArrowSquareOut />
      </Button>
    </div>
  );
}
`,
  },
  ["button-loading"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-loading.preview")
    ),
    source: `"use client";

import { Button } from "@/foundations/ui/button/button";
import { useState } from "react";

export default function ButtonExample() {
  const [isLoading, setIsLoading] = useState(false);

  return (
    <Button onClick={() => setIsLoading(!isLoading)} isLoading={isLoading}>
      Click to toggle
    </Button>
  );
}
`,
  },
  ["button-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-sizes.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button size="sm">Small</Button>
      <Button size="md">Medium</Button>
      <Button size="lg">Large</Button>
    </div>
  );
}
`,
  },
  ["button-variants"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-variants.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonVariantsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button variant="primary">Primary</Button>
      <Button variant="outline">Outline</Button>
      <Button variant="ghost">Ghost</Button>
      <Button variant="destructive">Destructive</Button>
    </div>
  );
}
`,
  },
  ["button"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import { HandPointing } from "@phosphor-icons/react/dist/ssr";

export default function ButtonExample() {
  return (
    <Button>
      <HandPointing />
      <span>Click me</span>
    </Button>
  );
}
`,
  },
  ["calendar-disable-future"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/calendar/examples/calendar-disable-future.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarDisableFuturePreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar
      value={selectedDate}
      onDateChange={setSelectedDate}
      getIsDisabled={(date: Date) => date > new Date()}
    />
  );
}
`,
  },
  ["calendar-locale"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar-locale.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarLocalePreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar value={selectedDate} onDateChange={setSelectedDate} locale="pt" />
  );
}
`,
  },
  ["calendar-range"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar-range.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarRangePreview() {
  const [dateRange, setDateRange] = useState<[Date, Date]>([
    new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
    new Date(),
  ]);

  return (
    <Calendar mode="range" value={dateRange} onDateChange={setDateRange} />
  );
}
`,
  },
  ["calendar-start-day"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/calendar/examples/calendar-start-day.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarStartDayPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar
      value={selectedDate}
      onDateChange={setSelectedDate}
      startWeekOn={1} // Start on Monday
    />
  );
}
`,
  },
  ["calendar"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return <Calendar value={selectedDate} onDateChange={setSelectedDate} />;
}
`,
  },
  ["checkbox-all-states"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/checkbox/examples/checkbox-all-states.preview")
    ),
    source: `"use client";

import { Label } from "@/foundations/ui/label/label";
import { Checkbox } from "../checkbox";

export default function CheckboxAllStatesPreview() {
  return (
    <div className="flex flex-col space-y-4">
      <div className="flex items-center space-x-2">
        <Checkbox id="unchecked" />
        <Label htmlFor="unchecked">Unchecked</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="checked" checked onChange={() => {}} />
        <Label htmlFor="checked">Checked</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="indeterminate" indeterminate />
        <Label htmlFor="indeterminate">Indeterminate</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled" disabled />
        <Label htmlFor="disabled">Disabled</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled-checked" checked disabled />
        <Label htmlFor="disabled-checked">Checked Disabled</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled-indeterminate" indeterminate disabled />
        <Label htmlFor="disabled-indeterminate">Indeterminate Disabled</Label>
      </div>
    </div>
  );
}
`,
  },
  ["checkbox-disabled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/checkbox/examples/checkbox-disabled.preview")
    ),
    source: `import { Checkbox } from "../checkbox";

export default function CheckboxDisabledPreview() {
  return (
    <div className="flex flex-col space-y-4">
      <Checkbox disabled />
      <Checkbox checked disabled />
    </div>
  );
}
`,
  },
  ["checkbox"]: {
    component: dynamic(
      () => import("@/foundations/ui/checkbox/examples/checkbox.preview")
    ),
    source: `import { Checkbox } from "../checkbox";

export default function CheckboxPreview() {
  return <Checkbox />;
}
`,
  },
  ["color-picker-disabled"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/color-picker/examples/color-picker-disabled.preview"
        )
    ),
    source: `"use client";
import { ColorPicker } from "@/foundations/ui/color-picker/color-picker";

export default function ColorPickerExample() {
  return <ColorPicker disabled></ColorPicker>;
}
`,
  },
  ["color-picker-picked-color"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/color-picker/examples/color-picker-picked-color.preview"
        )
    ),
    source: `"use client";
import { ColorPicker, HSV } from "@/foundations/ui/color-picker/color-picker";
import { useState } from "react";
import chroma from "chroma-js";

export default function ColorPickerExample() {
  const [pickedColor, setPickerColor] = useState<HSV | undefined>([
    210, 0.8, 0.5,
  ]);

  return (
    <div className="flex justify-between gap-4">
      <div className="w-36"></div>
      <ColorPicker
        color={pickedColor}
        onColorChange={setPickerColor}
      ></ColorPicker>
      <div className="flex w-36 flex-col gap-2 text-sm">
        {pickedColor && (
          <>
            <div
              className="mr-4 h-6 rounded-md"
              style={{
                backgroundColor: pickedColor
                  ? chroma.hsv(...pickedColor).css()
                  : "transparent",
              }}
            ></div>
            <div>
              <p className="font-bold">HEX</p>
              <p>{chroma.hsv(...pickedColor).hex()}</p>
            </div>
            <div>
              <p className="font-bold">RGB</p>
              <p>{chroma.hsv(...pickedColor).css()}</p>
            </div>
            <div>
              <p className="font-bold">HSV</p>
              <p>
                {pickedColor.map((v) => Math.round(v * 100) / 100).join(", ")}
              </p>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
`,
  },
  ["color-picker"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/color-picker/examples/color-picker.preview")
    ),
    source: `"use client";
import { ColorPicker, HSV } from "@/foundations/ui/color-picker/color-picker";
import { useState } from "react";
import chroma from "chroma-js";

export default function ColorPickerExample() {
  const [pickedColor, setPickerColor] = useState<HSV | undefined>(undefined);

  return (
    <div className="flex justify-between gap-4">
      <div className="w-36"></div>
      <ColorPicker
        color={pickedColor}
        onColorChange={setPickerColor}
      ></ColorPicker>
      <div className="flex w-36 flex-col gap-2 text-sm">
        {pickedColor && (
          <>
            <div
              className="mr-4 h-6 rounded-md"
              style={{
                backgroundColor: pickedColor
                  ? chroma.hsv(...pickedColor).css()
                  : "transparent",
              }}
            ></div>
            <div>
              <p className="font-bold">HEX</p>
              <p>{chroma.hsv(...pickedColor).hex()}</p>
            </div>
            <div>
              <p className="font-bold">RGB</p>
              <p>{chroma.hsv(...pickedColor).css()}</p>
            </div>
            <div>
              <p className="font-bold">HSV</p>
              <p>
                {pickedColor.map((v) => Math.round(v * 100) / 100).join(", ")}
              </p>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
`,
  },
  ["date-picker-date-time"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/date-picker/examples/date-picker-date-time.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerPanel, DatePickerTrigger } from "../date-picker";
import { Input } from "../../input/input";

export default function DatePickerDateTimePreview() {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());

  return (
    <div className="flex items-center gap-2">
      <DatePicker placement="bottom-start">
        <DatePickerTrigger className="w-60" placeholder="Select date">
          {format(selectedDate, "PPP")}
        </DatePickerTrigger>
        <DatePickerPanel
          className="w-72"
          value={selectedDate || new Date()}
          onDateChange={(date: Date) => {
            setSelectedDate(date);
          }}
        />
      </DatePicker>
      <Input className="w-40" type="time" />
    </div>
  );
}
`,
  },
  ["date-picker-shortcuts"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/date-picker/examples/date-picker-shortcuts.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerTrigger, DatePickerPanel } from "../date-picker";
import { DropdownDivider, DropdownItem } from "../../dropdown/dropdown";

export default function DatePickerShortcutsPreview() {
  const [dateRange, setDateRange] = useState<[Date, Date] | null>(null);

  return (
    <DatePicker placement="bottom-start">
      <DatePickerTrigger className="w-80" placeholder="Select date range">
        {dateRange
          ? format(dateRange[0], "MM/dd/yyyy") +
            " - " +
            format(dateRange[1], "MM/dd/yyyy")
          : undefined}
      </DatePickerTrigger>
      <DatePickerPanel
        className="w-80"
        mode="range"
        value={dateRange}
        onDateChange={(dates: [Date, Date]) => {
          setDateRange(dates);
        }}
      >
        <DropdownDivider />
        <DropdownItem
          onSelect={() => {
            setDateRange([new Date(), new Date()]);
          }}
        >
          Today
        </DropdownItem>
        <DropdownItem
          onSelect={() => {
            setDateRange([
              new Date(new Date().setDate(new Date().getDate() - 1)),
              new Date(new Date().setDate(new Date().getDate() - 1)),
            ]);
          }}
        >
          Yesterday
        </DropdownItem>
        <DropdownItem
          onSelect={() => {
            setDateRange([
              new Date(new Date().setDate(new Date().getDate() - 7)),
              new Date(),
            ]);
          }}
        >
          Last 7 days
        </DropdownItem>
        <DropdownDivider />
        <DropdownItem
          className="text-red-500"
          onSelect={() => {
            setDateRange(null);
          }}
        >
          Clear
        </DropdownItem>
      </DatePickerPanel>
    </DatePicker>
  );
}
`,
  },
  ["date-picker"]: {
    component: dynamic(
      () => import("@/foundations/ui/date-picker/examples/date-picker.preview")
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerPanel, DatePickerTrigger } from "../date-picker";

export default function DatePickerPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <DatePicker placement="bottom-start">
      <DatePickerTrigger className="w-60" placeholder="Select date">
        {selectedDate ? format(selectedDate, "PPP") : undefined}
      </DatePickerTrigger>
      <DatePickerPanel
        className="w-72"
        value={selectedDate}
        onDateChange={(date: Date) => {
          setSelectedDate(date);
        }}
      />
    </DatePicker>
  );
}
`,
  },
  ["dialog-arbitrary"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-arbitrary.preview")
    ),
    source: `import { X } from "@phosphor-icons/react/dist/ssr";

import { Button } from "../../button/button";
import { Dialog, DialogClose, DialogContent, DialogTrigger } from "../dialog";

export default function DialogArbitraryPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Dialog</Button>
      </DialogTrigger>
      <DialogContent className="p-0">
        <DialogClose className="absolute top-3 right-3" asChild>
          <Button variant="outline" size="sm" square>
            <X className="size-4" />
          </Button>
        </DialogClose>
        <div className="flex flex-col items-center rounded-2xl p-6">
          <div className="border-border bg-background-secondary mb-4 size-24 rounded-full border" />
          <h2 className="text-xl font-semibold">John Doe</h2>
          <p className="text-foreground-secondary mb-4 text-sm">
            Software Engineer
          </p>
          <div className="mb-6 flex space-x-4">
            <div className="text-center">
              <p className="font-semibold">1.2k</p>
              <p className="text-foreground-secondary text-xs">Followers</p>
            </div>
            <div className="text-center">
              <p className="font-semibold">3.4k</p>
              <p className="text-foreground-secondary text-xs">Following</p>
            </div>
            <div className="text-center">
              <p className="font-semibold">567</p>
              <p className="text-foreground-secondary text-xs">Posts</p>
            </div>
          </div>
          <Button>Follow</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-destructive"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/dialog/examples/dialog-destructive.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogDestructivePreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="destructive">Delete</Button>
      </DialogTrigger>
      <DialogContent className="w-80">
        <DialogTitle>Are you sure?</DialogTitle>
        <DialogDescription>
          This action cannot be undone. This will permanently delete your
          account and remove your data from our servers.
        </DialogDescription>
        <DialogActions>
          <Button variant="destructive">Delete everything</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-tall"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-tall.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogTallPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Tall Dialog</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogTitle>Very Tall Dialog</DialogTitle>
        <div>
          {Array(20)
            .fill(null)
            .map((_, index) => (
              <p key={index} className="mb-4">
                This is paragraph {index + 1}. Lorem ipsum dolor sit amet,
                consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut
                labore et dolore magna aliqua.
              </p>
            ))}
        </div>
        <DialogActions>
          <DialogClose asChild>
            <Button variant="outline">Close</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-top"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-top.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogTopPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open at the top</Button>
      </DialogTrigger>
      <DialogContent align="top">
        <DialogTitle>Unsaved changes</DialogTitle>
        <DialogDescription>
          Are you sure you want to leave this page?
        </DialogDescription>
        <DialogActions>
          <Button>Confirm</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open</Button>
      </DialogTrigger>
      <DialogContent className="w-80">
        <DialogTitle>Unsaved changes</DialogTitle>
        <DialogDescription>
          Are you sure you want to leave this page?
        </DialogDescription>
        <DialogActions>
          <Button>Confirm</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["disclosure-chevron"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/disclosure/examples/disclosure-chevron.preview"
        )
    ),
    source: `import {
  Disclosure,
  DisclosureChevron,
  DisclosureContent,
  DisclosureTrigger,
} from "../disclosure";

export default function DisclosureChevronPreview() {
  return (
    <div className="w-90 text-sm">
      <Disclosure>
        <DisclosureTrigger>
          Sloths can hold their breath for 40 minutes?
          <DisclosureChevron />
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          While most mammals can only hold their breath for a few minutes,
          sloths can slow their heart rates to one-third of its normal rate,
          allowing them to stay underwater for up to 40 minutes! This helps them
          escape predators and swim between islands.
        </DisclosureContent>
      </Disclosure>
      <Disclosure>
        <DisclosureTrigger>
          Want to learn about platypus superpowers?
          <DisclosureChevron />
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          Platypuses have electroreceptors in their bills that detect electrical
          signals from prey! They can sense the electrical fields produced by
          the muscular contractions of small aquatic animals. They&apos;re also
          one of the few mammals that produce venom.
        </DisclosureContent>
      </Disclosure>
    </div>
  );
}
`,
  },
  ["disclosure-exclusive"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/disclosure/examples/disclosure-exclusive.preview"
        )
    ),
    source: `import {
  DisclosureGroup,
  Disclosure,
  DisclosureContent,
  DisclosureTrigger,
} from "../disclosure";

export default function DisclosurePreview() {
  return (
    <div className="w-90 text-sm">
      <DisclosureGroup>
        <Disclosure>
          <DisclosureTrigger>
            Did you know that honey never spoils?
          </DisclosureTrigger>
          <DisclosureContent className="text-foreground-secondary">
            Archaeologists have found pots of honey in ancient Egyptian tombs
            that are over 3,000 years old and still perfectly edible! The unique
            chemical composition and low moisture content make it impossible for
            bacteria to grow in honey.
          </DisclosureContent>
        </Disclosure>
        <Disclosure>
          <DisclosureTrigger>
            Want to learn about hummingbird metabolism?
          </DisclosureTrigger>
          <DisclosureContent className="text-foreground-secondary">
            A hummingbird&apos;s heart beats up to 1,260 times per minute during
            flight! They have such a fast metabolism that they need to eat every
            10-15 minutes and visit up to 2,000 flowers per day. At night, they
            enter a state called torpor where their metabolism slows down by 95%
            to survive.
          </DisclosureContent>
        </Disclosure>
      </DisclosureGroup>
    </div>
  );
}
`,
  },
  ["disclosure-styled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/disclosure/examples/disclosure-styled.preview")
    ),
    source: `import { cn } from "@/lib/utils";

import {
  Disclosure,
  DisclosureContent,
  DisclosureTrigger,
  DisclosureChevron,
  DisclosureGroup,
} from "../disclosure";

const AccordionGroup = ({
  children,
  className,
}: React.ComponentProps<"div">) => {
  return (
    <DisclosureGroup>
      <div className={cn("rounded-lg border", className)}>{children}</div>
    </DisclosureGroup>
  );
};

const Accordion = ({
  children,
  className,
}: React.ComponentProps<typeof Disclosure>) => {
  return (
    <Disclosure className={cn("border-b last:border-b-0", className)}>
      {children}
    </Disclosure>
  );
};

const AccordionTrigger = ({
  children,
  className,
}: React.ComponentProps<typeof DisclosureTrigger>) => {
  return (
    <DisclosureTrigger
      className={cn(
        "hover:bg-foreground/5 flex cursor-pointer items-center justify-between gap-4 px-3 py-2 transition-colors",
        className
      )}
    >
      {children}
      <DisclosureChevron />
    </DisclosureTrigger>
  );
};

const AccordionContent = ({
  children,
  className,
}: React.ComponentProps<typeof DisclosureContent>) => {
  return (
    <DisclosureContent>
      <div className={cn("border-t px-3 py-2", className)}>{children}</div>
    </DisclosureContent>
  );
};

export default function DisclosureStyledPreview() {
  return (
    <AccordionGroup>
      <Accordion>
        <AccordionTrigger>
          Did you know that butterflies taste with their feet?
        </AccordionTrigger>
        <AccordionContent>
          Butterflies have taste receptors on their feet that help them identify
          which plants to lay their eggs on. When they land on a plant, they can
          taste it to determine if it&apos;s suitable food for their
          caterpillars.
        </AccordionContent>
      </Accordion>
      <Accordion>
        <AccordionTrigger>
          Want to learn about tardigrade superpowers?
        </AccordionTrigger>
        <AccordionContent>
          Tardigrades, also known as water bears, can survive in space! They can
          withstand extreme temperatures, pressure, radiation, and can even
          survive being completely dehydrated for years by entering a state of
          cryptobiosis.
        </AccordionContent>
      </Accordion>
      <Accordion>
        <AccordionTrigger>
          Have you heard about the immortal jellyfish?
        </AccordionTrigger>
        <AccordionContent>
          The Turritopsis dohrnii jellyfish can technically live forever! When
          stressed or injured, it can transform back into its juvenile stage
          instead of dying, making it the only known animal capable of
          biological immortality.
        </AccordionContent>
      </Accordion>
    </AccordionGroup>
  );
}
`,
  },
  ["disclosure"]: {
    component: dynamic(
      () => import("@/foundations/ui/disclosure/examples/disclosure.preview")
    ),
    source: `import {
  Disclosure,
  DisclosureContent,
  DisclosureTrigger,
} from "../disclosure";

export default function DisclosurePreview() {
  return (
    <div className="w-90 text-sm">
      <Disclosure>
        <DisclosureTrigger>
          Did you know that octopuses have three hearts?
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          Two hearts pump blood to the gills, while the third one circulates it
          to the rest of the body. When they swim, their third heart actually
          stops beating - which is why they tend to crawl more than swim!
        </DisclosureContent>
      </Disclosure>
      <Disclosure>
        <DisclosureTrigger>
          Want to hear about immortal jellyfish?
        </DisclosureTrigger>
        <DisclosureContent className="text-foreground-secondary">
          The Turritopsis dohrnii jellyfish can technically live forever! When
          stressed, it can transform back into a juvenile form by turning its
          existing cells into different cell types. It&apos;s like having a
          reset button for aging!
        </DisclosureContent>
      </Disclosure>
    </div>
  );
}
`,
  },
  ["divider-vertical"]: {
    component: dynamic(
      () => import("@/foundations/ui/divider/examples/divider-vertical.preview")
    ),
    source: `import { Divider } from "../divider";

export default function DividerVerticalPreview() {
  return (
    <nav className="flex items-center gap-2">
      <p>Home</p>
      <Divider orientation="vertical" />
      <p>About</p>
    </nav>
  );
}
`,
  },
  ["divider"]: {
    component: dynamic(
      () => import("@/foundations/ui/divider/examples/divider.preview")
    ),
    source: `import { Divider } from "../divider";

export default function DividerPreview() {
  return (
    <div>
      <p>Something</p>
      <Divider />
      <p>Something else</p>
    </div>
  );
}
`,
  },
  ["dropdown-custom-items"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/dropdown/examples/dropdown-custom-items.preview"
        )
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Dropdown,
  DropdownItem,
  DropdownItems,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";

export default function DropdownCustomItemsPreview() {
  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Custom Items</Button>
      </DropdownTrigger>
      <DropdownItems>
        <DropdownItem className="flex flex-col items-start gap-1 text-left">
          <div className="font-medium">Custom Item 1</div>
          <div className="text-foreground-secondary text-sm">
            This is a description for the first item
          </div>
        </DropdownItem>
        <DropdownItem className="flex flex-col items-start gap-1 text-left">
          <div className="font-medium">Custom Item 2</div>
          <div className="text-foreground-secondary text-sm">
            This is a description for the second item
          </div>
        </DropdownItem>
        <DropdownItem className="flex items-center justify-between">
          <span>Custom Item 3</span>
          <span className="text-foreground-secondary text-sm">‚åòK</span>
        </DropdownItem>
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["dropdown-empty"]: {
    component: dynamic(
      () => import("@/foundations/ui/dropdown/examples/dropdown-empty.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Dropdown,
  DropdownEmpty,
  DropdownItems,
  DropdownSearchInput,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";

export default function DropdownEmptyPreview() {
  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Empty Menu</Button>
      </DropdownTrigger>
      <DropdownItems>
        <DropdownSearchInput placeholder="Search items..." />
        <DropdownEmpty>No items found.</DropdownEmpty>
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["dropdown-icons"]: {
    component: dynamic(
      () => import("@/foundations/ui/dropdown/examples/dropdown-icons.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Dropdown,
  DropdownItem,
  DropdownItems,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";
import {
  Copy,
  PencilSimple,
  Archive,
  Trash,
} from "@phosphor-icons/react/dist/ssr";

export default function DropdownIconsPreview() {
  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Menu with Icons</Button>
      </DropdownTrigger>
      <DropdownItems>
        <DropdownItem>
          <PencilSimple />
          Edit
        </DropdownItem>
        <DropdownItem>
          <Copy />
          Duplicate
        </DropdownItem>
        <DropdownItem>
          <Archive />
          Archive
        </DropdownItem>
        <DropdownItem disabled>
          <Trash />
          Delete
        </DropdownItem>
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["dropdown-multiple"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/dropdown/examples/dropdown-multiple.preview")
    ),
    source: `"use client";

import { Button } from "@/foundations/ui/button/button";
import { Checkbox } from "@/foundations/ui/checkbox/checkbox";
import {
  Dropdown,
  DropdownItem,
  DropdownItems,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";
import { useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function DropdownMultiplePreview() {
  const [selected, setSelected] = useState<number[]>([]);

  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Select People</Button>
      </DropdownTrigger>
      <DropdownItems>
        {people.map((person) => (
          <DropdownItem
            key={person.id}
            className="px-2"
            onSelect={(e) => {
              e.preventDefault(); // prevent close
              setSelected((prev) =>
                prev.includes(person.id)
                  ? prev.filter((id) => id !== person.id)
                  : [...prev, person.id]
              );
            }}
          >
            <Checkbox
              className="pointer-events-none"
              checked={selected.includes(person.id)}
              readOnly
            />
            <span>{person.name}</span>
          </DropdownItem>
        ))}
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["dropdown-search-create"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/dropdown/examples/dropdown-search-create.preview"
        )
    ),
    source: `"use client";

import { Button } from "@/foundations/ui/button/button";
import { Checkbox } from "@/foundations/ui/checkbox/checkbox";
import {
  Dropdown,
  DropdownDivider,
  DropdownEmpty,
  DropdownItem,
  DropdownItems,
  DropdownSearchInput,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";
import { UserCircle } from "@phosphor-icons/react/dist/ssr";
import { useMemo, useState } from "react";
import { Avatar, AvatarFallback } from "@/foundations/ui/avatar/avatar";

type Person = { id: number; name: string };

const initialPeople: Person[] = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
  { id: 6, name: "Demetrius Ward" },
  { id: 7, name: "Eleanora Fisher" },
  { id: 8, name: "Augustus Palmer" },
  { id: 9, name: "Cordelia Blake" },
  { id: 10, name: "Sebastian Hayes" },
];

export default function DropdownSearchCreatePreview() {
  const [people, setPeople] = useState<Person[]>(initialPeople);
  const [selected, setSelected] = useState<Person[]>([]);
  const [search, setSearch] = useState("");

  const filteredPeople = useMemo(() => {
    return people.filter((person) =>
      person.name.toLowerCase().includes(search.toLowerCase())
    );
  }, [search, people]);

  const onOpenChange = (open: boolean) => {
    if (!open) {
      setTimeout(() => {
        setSearch("");
        setPeople((prev) => [
          ...selected,
          ...prev.filter((person) => !selected.some((s) => s.id === person.id)),
        ]);
      }, 200); // wait for menu to close
    }
  };

  return (
    <div className="border-border w-96 rounded-3xl border p-4">
      <Dropdown onOpenChange={onOpenChange}>
        <DropdownTrigger asChild>
          <Button variant="outline">Select People</Button>
        </DropdownTrigger>
        <DropdownItems>
          <DropdownSearchInput
            placeholder="Search people"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          {filteredPeople.map((person) => (
            <DropdownItem
              key={person.id}
              className="px-2"
              onSelect={(e) => {
                e.preventDefault(); // prevent close
                setSelected((prev) =>
                  prev.some((p) => p.id === person.id)
                    ? prev.filter((p) => p.id !== person.id)
                    : [...prev, person]
                );
              }}
            >
              <Checkbox
                className="pointer-events-none"
                checked={selected.some((p) => p.id === person.id)}
                readOnly
              />
              <span>{person.name}</span>
            </DropdownItem>
          ))}
          {filteredPeople.length === 0 && (
            <DropdownEmpty>No results</DropdownEmpty>
          )}
          {search && (
            <>
              <DropdownDivider />
              <DropdownItem
                onSelect={() => {
                  const newPerson = {
                    id: people.length + 1,
                    name: search,
                  };
                  setPeople((prev) => [...prev, newPerson]);
                  setSelected((prev) => [...prev, newPerson]);
                  setSearch("");
                }}
              >
                Create &quot;{search}&quot;
              </DropdownItem>
            </>
          )}
        </DropdownItems>
      </Dropdown>
      {selected.length > 0 ? (
        <div className="mt-4 flex flex-wrap items-center -space-x-2 gap-y-2">
          {selected.map((person) => (
            <Avatar key={person.id} size="sm">
              <AvatarFallback>{person.name[0]}</AvatarFallback>
            </Avatar>
          ))}
        </div>
      ) : (
        <div className="text-foreground-secondary mt-4 flex h-8 items-center gap-1 text-sm">
          <UserCircle className="text-base" /> No people selected
        </div>
      )}
    </div>
  );
}
`,
  },
  ["dropdown-search"]: {
    component: dynamic(
      () => import("@/foundations/ui/dropdown/examples/dropdown-search.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Dropdown,
  DropdownItem,
  DropdownItems,
  DropdownSearchInput,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";

export default function DropdownSearchPreview() {
  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Search Items</Button>
      </DropdownTrigger>
      <DropdownItems>
        <DropdownSearchInput placeholder="Search items..." />
        <DropdownItem>Apple</DropdownItem>
        <DropdownItem>Banana</DropdownItem>
        <DropdownItem>Orange</DropdownItem>
        <DropdownItem>Pineapple</DropdownItem>
        <DropdownItem>Strawberry</DropdownItem>
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["dropdown-sections"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/dropdown/examples/dropdown-sections.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Dropdown,
  DropdownHeading,
  DropdownItem,
  DropdownItems,
  DropdownSection,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";

export default function DropdownSectionsPreview() {
  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Open Menu</Button>
      </DropdownTrigger>
      <DropdownItems>
        <DropdownSection>
          <DropdownHeading>Actions</DropdownHeading>
          <DropdownItem>Edit</DropdownItem>
          <DropdownItem>Duplicate</DropdownItem>
        </DropdownSection>
        <DropdownSection>
          <DropdownHeading>Danger Zone</DropdownHeading>
          <DropdownItem>Archive</DropdownItem>
          <DropdownItem disabled>Delete</DropdownItem>
        </DropdownSection>
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["dropdown"]: {
    component: dynamic(
      () => import("@/foundations/ui/dropdown/examples/dropdown.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Dropdown,
  DropdownItem,
  DropdownItems,
  DropdownTrigger,
} from "@/foundations/ui/dropdown/dropdown";

export default function DropdownPreview() {
  return (
    <Dropdown>
      <DropdownTrigger asChild>
        <Button variant="outline">Open Menu</Button>
      </DropdownTrigger>
      <DropdownItems>
        <DropdownItem>Edit</DropdownItem>
        <DropdownItem>Duplicate</DropdownItem>
        <DropdownItem>Archive</DropdownItem>
        <DropdownItem disabled>Delete</DropdownItem>
      </DropdownItems>
    </Dropdown>
  );
}
`,
  },
  ["input-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-disabled.preview")
    ),
    source: `import { Input } from "../input";

export default function InputDisabled() {
  return (
    <div className="w-90">
      <Input placeholder="Type something..." disabled />
    </div>
  );
}
`,
  },
  ["input-icon-action"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-icon-action.preview")
    ),
    source: `"use client";

import { Eye, EyeClosed, Lock } from "@phosphor-icons/react";
import { useState } from "react";

import { Input, InputGroup, InputPrefix, InputSuffix } from "../input";

export default function InputIconAction() {
  const [showPassword, setShowPassword] = useState(false);

  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix>
          <Lock />
        </InputPrefix>
        <Input
          type={showPassword ? "text" : "password"}
          placeholder="Your password here"
        />
        <InputSuffix interactive>
          <button onClick={() => setShowPassword(!showPassword)}>
            {showPassword ? <Eye /> : <EyeClosed />}
          </button>
        </InputSuffix>
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input-icon"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-icon.preview")
    ),
    source: `import { MagnifyingGlass } from "@phosphor-icons/react/dist/ssr";
import { Input, InputGroup, InputPrefix } from "../input";

export default function InputIcon() {
  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix>
          <MagnifyingGlass />
        </InputPrefix>
        <Input placeholder="Search something" />
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input-interactive-addon"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/input/examples/input-interactive-addon.preview"
        )
    ),
    source: `"use client";

import { useRef } from "react";
import { Info } from "@phosphor-icons/react";

import { Input, InputGroup, InputPrefix, InputSuffix } from "../input";
import { Tooltip } from "../../tooltip/tooltip";

export default function InputInteractiveAddon() {
  const input = useRef<HTMLInputElement>(null);

  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix className="flex items-center gap-2" interactive>
          <button onClick={() => alert("interactive")}>+351</button>
        </InputPrefix>
        <Input ref={input} placeholder="000 000 000" />
        <InputSuffix interactive>
          <Tooltip content="Your phone number will be visible">
            <Info />
          </Tooltip>
        </InputSuffix>
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input-invalid"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-invalid.preview")
    ),
    source: `import { Input } from "../input";

export default function InputInvalid() {
  return (
    <div className="w-90">
      <Input placeholder="Type something..." defaultValue="Pedro" invalid />
    </div>
  );
}
`,
  },
  ["input-minimal"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-minimal.preview")
    ),
    source: `import { Input } from "../input";

export default function InputMinimal() {
  return (
    <div className="w-90">
      <Input variant="minimal" placeholder="Type something..." />
    </div>
  );
}
`,
  },
  ["input-text-addons"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input-text-addons.preview")
    ),
    source: `import { Input, InputGroup, InputPrefix, InputSuffix } from "../input";

export default function InputTextAddons() {
  return (
    <div className="w-90">
      <InputGroup>
        <InputPrefix>https://</InputPrefix>
        <Input placeholder="subdomain" />
        <InputSuffix>.significa.co</InputSuffix>
      </InputGroup>
    </div>
  );
}
`,
  },
  ["input"]: {
    component: dynamic(
      () => import("@/foundations/ui/input/examples/input.preview")
    ),
    source: `import { Input } from "../input";

export default function InputExample() {
  return (
    <div className="w-90">
      <Input placeholder="Type something..." />
    </div>
  );
}
`,
  },
  ["label"]: {
    component: dynamic(
      () => import("@/foundations/ui/label/examples/label.preview")
    ),
    source: `import { Label } from "../label";

export default function LabelPreview() {
  return <Label>Label</Label>;
}
`,
  },
  ["listbox-custom"]: {
    component: dynamic(
      () => import("@/foundations/ui/listbox/examples/listbox-custom.preview")
    ),
    source: `"use client";

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/foundations/ui/avatar/avatar";
import {
  Listbox,
  ListboxOption,
  ListboxOptions,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxCustomPreview() {
  const [selectedPerson, setSelectedPerson] = useState<
    (typeof people)[number] | null
  >(null);

  return (
    <div className="w-80">
      <Listbox value={selectedPerson} onChange={setSelectedPerson}>
        <ListboxTrigger
          placeholder="Select person"
          className={selectedPerson ? "pl-3" : ""}
        >
          {selectedPerson && (
            <span className="flex items-center gap-2">
              <Avatar size="xs">
                <AvatarImage
                  src={\`https://api.dicebear.com/6.x/thumbs/svg?seed=\${selectedPerson.name}\`}
                />
                <AvatarFallback>{selectedPerson.name[0]}</AvatarFallback>
              </Avatar>
              <span>{selectedPerson.name}</span>
            </span>
          )}
        </ListboxTrigger>
        <ListboxOptions>
          {people.map((person) => (
            <ListboxOption
              key={person.id}
              value={person}
              className="flex items-center gap-2 px-3"
            >
              <Avatar size="xs">
                <AvatarImage
                  src={\`https://api.dicebear.com/6.x/thumbs/svg?seed=\${person.name}\`}
                />
                <AvatarFallback>{person.name[0]}</AvatarFallback>
              </Avatar>
              <span>{person.name}</span>
            </ListboxOption>
          ))}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["listbox-divider"]: {
    component: dynamic(
      () => import("@/foundations/ui/listbox/examples/listbox-divider.preview")
    ),
    source: `"use client";

import {
  Listbox,
  ListboxDivider,
  ListboxOption,
  ListboxOptions,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { Fragment, useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxDividerPreview() {
  const [selectedPerson, setSelectedPerson] = useState(people[0]);

  return (
    <div className="w-80">
      <Listbox value={selectedPerson} onChange={setSelectedPerson}>
        <ListboxTrigger>{selectedPerson?.name}</ListboxTrigger>
        <ListboxOptions>
          {people.map((person, i) => (
            <Fragment key={person.id}>
              <ListboxOption value={person}>{person.name}</ListboxOption>
              {i === 2 && <ListboxDivider />}
            </Fragment>
          ))}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["listbox-minimal"]: {
    component: dynamic(
      () => import("@/foundations/ui/listbox/examples/listbox-minimal.preview")
    ),
    source: `"use client";

import {
  Listbox,
  ListboxOption,
  ListboxOptions,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxMinimalPreview() {
  const [selectedPerson, setSelectedPerson] = useState(people[0]);

  return (
    <div className="w-80">
      <Listbox value={selectedPerson} onChange={setSelectedPerson}>
        <ListboxTrigger variant="minimal">
          {selectedPerson?.name}
        </ListboxTrigger>
        <ListboxOptions>
          {people.map((person) => (
            <ListboxOption key={person.id} value={person}>
              {person.name}
            </ListboxOption>
          ))}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["listbox-multiple"]: {
    component: dynamic(
      () => import("@/foundations/ui/listbox/examples/listbox-multiple.preview")
    ),
    source: `"use client";

import {
  Listbox,
  ListboxEmpty,
  ListboxOption,
  ListboxOptions,
  ListboxSearchInput,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { useMemo, useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxMultiplePreview() {
  const [selectedPeople, setSelectedPeople] = useState<
    (typeof people)[number][]
  >([]);
  const [search, setSearch] = useState("");

  const filteredPeople = useMemo(() => {
    return people.filter((person) =>
      person.name.toLowerCase().includes(search.toLowerCase())
    );
  }, [search]);

  return (
    <div className="w-80">
      <Listbox value={selectedPeople} onChange={setSelectedPeople}>
        <ListboxTrigger placeholder="Select people">
          {selectedPeople.length > 1
            ? \`\${selectedPeople.length} people selected\`
            : selectedPeople[0]?.name}
        </ListboxTrigger>
        <ListboxOptions>
          <ListboxSearchInput
            placeholder="Search people"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          {filteredPeople.map((person) => (
            <ListboxOption key={person.id} value={person}>
              {person.name}
            </ListboxOption>
          ))}
          {filteredPeople.length === 0 && (
            <ListboxEmpty>No results</ListboxEmpty>
          )}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["listbox-placeholder"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/listbox/examples/listbox-placeholder.preview")
    ),
    source: `"use client";

import {
  Listbox,
  ListboxOption,
  ListboxOptions,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxPlaceholderPreview() {
  const [selectedPerson, setSelectedPerson] = useState<
    (typeof people)[number] | null
  >(null);

  return (
    <div className="w-80">
      <Listbox value={selectedPerson} onChange={setSelectedPerson}>
        <ListboxTrigger placeholder="Select person">
          {selectedPerson?.name}
        </ListboxTrigger>
        <ListboxOptions>
          {people.map((person) => (
            <ListboxOption key={person.id} value={person}>
              {person.name}
            </ListboxOption>
          ))}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["listbox-search"]: {
    component: dynamic(
      () => import("@/foundations/ui/listbox/examples/listbox-search.preview")
    ),
    source: `"use client";

import {
  Listbox,
  ListboxEmpty,
  ListboxOption,
  ListboxOptions,
  ListboxSearchInput,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { useMemo, useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxSearchPreview() {
  const [search, setSearch] = useState("");
  const [selectedPerson, setSelectedPerson] = useState(people[0]);

  const filteredPeople = useMemo(() => {
    return people.filter((person) =>
      person.name.toLowerCase().includes(search.toLowerCase())
    );
  }, [search]);

  return (
    <div className="w-80">
      <Listbox value={selectedPerson} onChange={setSelectedPerson}>
        <ListboxTrigger>{selectedPerson?.name}</ListboxTrigger>
        <ListboxOptions>
          <ListboxSearchInput
            placeholder="Search people"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          {filteredPeople.map((person) => (
            <ListboxOption key={person.id} value={person}>
              {person.name}
            </ListboxOption>
          ))}
          {filteredPeople.length === 0 && (
            <ListboxEmpty>No results</ListboxEmpty>
          )}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["listbox"]: {
    component: dynamic(
      () => import("@/foundations/ui/listbox/examples/listbox.preview")
    ),
    source: `"use client";

import {
  Listbox,
  ListboxOption,
  ListboxOptions,
  ListboxTrigger,
} from "@/foundations/ui/listbox/listbox";
import { useState } from "react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" },
];

export default function ListboxPreview() {
  const [selectedPerson, setSelectedPerson] = useState(people[0]);

  return (
    <div className="w-80">
      <Listbox value={selectedPerson} onChange={setSelectedPerson}>
        <ListboxTrigger>{selectedPerson?.name}</ListboxTrigger>
        <ListboxOptions>
          {people.map((person) => (
            <ListboxOption key={person.id} value={person}>
              {person.name}
            </ListboxOption>
          ))}
        </ListboxOptions>
      </Listbox>
    </div>
  );
}
`,
  },
  ["popover-custom-width"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/popover/examples/popover-custom-width.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/foundations/ui/popover/popover";

export default function PopoverCustomWidthPreview() {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline">Custom Width</Button>
      </PopoverTrigger>
      <PopoverContent className="w-96">
        <p>This popover has a custom width of 24rem (w-96).</p>
        <p className="text-foreground-secondary mt-2 text-sm">
          You can customize the width of the popover by adding a width utility
          class to the PopoverContent component.
        </p>
      </PopoverContent>
    </Popover>
  );
}
`,
  },
  ["popover-empty"]: {
    component: dynamic(
      () => import("@/foundations/ui/popover/examples/popover-empty.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Popover,
  PopoverContent,
  PopoverEmpty,
  PopoverSearchInput,
  PopoverTrigger,
} from "@/foundations/ui/popover/popover";

export default function PopoverEmptyPreview() {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline">Empty State</Button>
      </PopoverTrigger>
      <PopoverContent className="p-0">
        <PopoverSearchInput placeholder="Search items..." />
        <PopoverEmpty>No items found.</PopoverEmpty>
      </PopoverContent>
    </Popover>
  );
}
`,
  },
  ["popover-modal"]: {
    component: dynamic(
      () => import("@/foundations/ui/popover/examples/popover-modal.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Popover,
  PopoverClose,
  PopoverContent,
  PopoverTrigger,
} from "@/foundations/ui/popover/popover";

export default function PopoverModalPreview() {
  return (
    <Popover modal>
      <PopoverTrigger asChild>
        <Button variant="outline">Open Modal Popover</Button>
      </PopoverTrigger>
      <PopoverContent className="flex flex-col gap-4">
        <h3 className="text-sm font-medium">This is a modal popover</h3>
        <p className="text-foreground-secondary text-sm">
          It will trap focus inside. Very useful for popovers with advanced
          interactions inside (like forms)
        </p>
        <div className="flex items-center gap-2">
          <PopoverClose asChild>
            <Button variant="outline" type="button">
              Cancel
            </Button>
          </PopoverClose>
          <Button type="submit">Submit</Button>
        </div>
      </PopoverContent>
    </Popover>
  );
}
`,
  },
  ["popover-placement"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/popover/examples/popover-placement.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/foundations/ui/popover/popover";

export default function PopoverPlacementPreview() {
  return (
    <div className="flex flex-wrap items-center justify-center gap-4">
      <Popover placement="top">
        <PopoverTrigger asChild>
          <Button variant="outline">Top</Button>
        </PopoverTrigger>
        <PopoverContent>
          <p>This popover appears on top.</p>
        </PopoverContent>
      </Popover>

      <Popover placement="bottom">
        <PopoverTrigger asChild>
          <Button variant="outline">Bottom</Button>
        </PopoverTrigger>
        <PopoverContent>
          <p>This popover appears at the bottom.</p>
        </PopoverContent>
      </Popover>

      <Popover placement="left">
        <PopoverTrigger asChild>
          <Button variant="outline">Left</Button>
        </PopoverTrigger>
        <PopoverContent>
          <p>This popover appears on the left.</p>
        </PopoverContent>
      </Popover>

      <Popover placement="right">
        <PopoverTrigger asChild>
          <Button variant="outline">Right</Button>
        </PopoverTrigger>
        <PopoverContent>
          <p>This popover appears on the right.</p>
        </PopoverContent>
      </Popover>
    </div>
  );
}
`,
  },
  ["popover-search"]: {
    component: dynamic(
      () => import("@/foundations/ui/popover/examples/popover-search.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Popover,
  PopoverContent,
  PopoverSearchInput,
  PopoverTrigger,
} from "@/foundations/ui/popover/popover";

export default function PopoverSearchPreview() {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline">Search</Button>
      </PopoverTrigger>
      <PopoverContent className="p-0">
        <PopoverSearchInput placeholder="Search items..." />
        <div className="mt-2 space-y-1 p-1">
          <div className="hover:bg-foreground/5 rounded-lg px-2 py-1.5">
            Item 1
          </div>
          <div className="hover:bg-foreground/5 rounded-lg px-2 py-1.5">
            Item 2
          </div>
          <div className="hover:bg-foreground/5 rounded-lg px-2 py-1.5">
            Item 3
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}
`,
  },
  ["popover"]: {
    component: dynamic(
      () => import("@/foundations/ui/popover/examples/popover.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/foundations/ui/popover/popover";

export default function PopoverPreview() {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline">Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        <p>This is the content of the popover.</p>
      </PopoverContent>
    </Popover>
  );
}
`,
  },
  ["radio"]: {
    component: dynamic(
      () => import("@/foundations/ui/radio/examples/radio.preview")
    ),
    source: `import { Radio } from "../radio";
import { Label } from "../../label/label";

export default function RadioPreview() {
  return (
    <div className="flex flex-col gap-4">
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Radio id="option1" name="options" />
          <Label htmlFor="option1">Option 1</Label>
        </div>
        <div className="flex items-center gap-2">
          <Radio id="option2" name="options" />
          <Label htmlFor="option2">Option 2</Label>
        </div>
        <div className="flex items-center gap-2">
          <Radio id="option3" name="options" />
          <Label htmlFor="option3">Option 3</Label>
        </div>
      </div>

      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Radio id="disabled" disabled />
          <Label htmlFor="disabled">Disabled</Label>
        </div>
        <div className="flex items-center gap-2">
          <Radio id="checked-disabled" disabled defaultChecked />
          <Label htmlFor="checked-disabled">Checked & Disabled</Label>
        </div>
      </div>
    </div>
  );
}
`,
  },
  ["select-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/select/examples/select-disabled.preview")
    ),
    source: `import { Select } from "../select";

export default function SelectDisabledPreview() {
  return (
    <div className="w-90">
      <Select disabled>
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
        <option value="3">Option 3</option>
      </Select>
    </div>
  );
}
`,
  },
  ["select-invalid"]: {
    component: dynamic(
      () => import("@/foundations/ui/select/examples/select-invalid.preview")
    ),
    source: `import { Select } from "../select";

export default function SelectInvalidPreview() {
  return (
    <div className="w-90">
      <Select invalid>
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
        <option value="3">Option 3</option>
      </Select>
    </div>
  );
}
`,
  },
  ["select-minimal"]: {
    component: dynamic(
      () => import("@/foundations/ui/select/examples/select-minimal.preview")
    ),
    source: `import { Select } from "../select";

export default function SelectMinimalPreview() {
  return (
    <div className="w-90">
      <Select variant="minimal">
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
        <option value="3">Option 3</option>
      </Select>
    </div>
  );
}
`,
  },
  ["select-prefix"]: {
    component: dynamic(
      () => import("@/foundations/ui/select/examples/select-prefix.preview")
    ),
    source: `import { User } from "@phosphor-icons/react/dist/ssr";
import { Select, SelectGroup, SelectPrefix } from "../select";

export default function SelectPrefixPreview() {
  return (
    <div className="w-90">
      <SelectGroup>
        <SelectPrefix>
          <User />
        </SelectPrefix>
        <Select>
          <option value="1">Option 1</option>
          <option value="2">Option 2</option>
          <option value="3">Option 3</option>
        </Select>
      </SelectGroup>
    </div>
  );
}
`,
  },
  ["select"]: {
    component: dynamic(
      () => import("@/foundations/ui/select/examples/select.preview")
    ),
    source: `import { Select } from "../select";

export default function SelectPreview() {
  return (
    <div className="w-90">
      <Select>
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
        <option value="3">Option 3</option>
      </Select>
    </div>
  );
}
`,
  },
  ["skeleton"]: {
    component: dynamic(
      () => import("@/foundations/ui/skeleton/examples/skeleton.preview")
    ),
    source: `import { Skeleton } from "../skeleton";

export default function SkeletonExample() {
  return (
    <div className="flex items-center gap-1">
      <Skeleton className="size-10 rounded-full" />
      <div className="flex flex-col gap-1">
        <Skeleton className="h-4 w-24" />
        <Skeleton className="h-4 w-32" />
      </div>
    </div>
  );
}
`,
  },
  ["spinner-color"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner-color.preview")
    ),
    source: `import { Spinner } from "../spinner";

export default function SpinnerColorExample() {
  return <Spinner className="text-emerald-500" />;
}
`,
  },
  ["spinner-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner-sizes.preview")
    ),
    source: `import { Spinner } from "../spinner";

export default function SpinnerSizesExample() {
  return (
    <div className="flex flex-col items-center gap-4">
      <Spinner size="xs" />
      <Spinner size="sm" />
      <Spinner size="md" />
      <Spinner size="lg" />
    </div>
  );
}
`,
  },
  ["spinner"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner.preview")
    ),
    source: `import { Spinner } from "../spinner";

export default function SpinnerExample() {
  return <Spinner />;
}
`,
  },
  ["switch-custom-style"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/switch/examples/switch-custom-style.preview")
    ),
    source: `import { Switch } from "../switch";

export default function SwitchCustomStyle() {
  return <Switch className="bg-blue-400/20 checked:bg-blue-500" />;
}
`,
  },
  ["switch-disabled-checked"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/switch/examples/switch-disabled-checked.preview"
        )
    ),
    source: `import { Switch } from "../switch";

export default function SwitchDisabledChecked() {
  return <Switch disabled checked />;
}
`,
  },
  ["switch-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/switch/examples/switch-disabled.preview")
    ),
    source: `import { Switch } from "../switch";

export default function SwitchDisabled() {
  return <Switch disabled />;
}
`,
  },
  ["switch"]: {
    component: dynamic(
      () => import("@/foundations/ui/switch/examples/switch.preview")
    ),
    source: `import { Switch } from "../switch";

export default function SwitchPreview() {
  return <Switch />;
}
`,
  },
  ["tabs-controlled"]: {
    component: dynamic(
      () => import("@/foundations/ui/tabs/examples/tabs-controlled.preview")
    ),
    source: `"use client";

import { useState } from "react";
import { Tabs, TabsItem, TabsItems, TabsPanel, TabsPanels } from "../tabs";

export default function TabsControlledPreview() {
  const [selectedIndex, setSelectedIndex] = useState(0);

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        <span className="text-muted-foreground text-sm">Current tab:</span>
        <span className="font-medium">{selectedIndex}</span>
        <button
          onClick={() => setSelectedIndex((prev) => (prev + 1) % 3)}
          className="rounded-lg border px-3 py-1 text-sm"
        >
          Next tab
        </button>
      </div>

      <Tabs selectedIndex={selectedIndex} onChange={setSelectedIndex}>
        <TabsItems>
          <TabsItem>Tab 1</TabsItem>
          <TabsItem>Tab 2</TabsItem>
          <TabsItem>Tab 3</TabsItem>
        </TabsItems>
        <TabsPanels>
          <TabsPanel>Panel 1</TabsPanel>
          <TabsPanel>Panel 2</TabsPanel>
          <TabsPanel>Panel 3</TabsPanel>
        </TabsPanels>
      </Tabs>
    </div>
  );
}
`,
  },
  ["tabs-vertical"]: {
    component: dynamic(
      () => import("@/foundations/ui/tabs/examples/tabs-vertical.preview")
    ),
    source: `import { CreditCard, Gear, Users } from "@phosphor-icons/react/dist/ssr";
import { Tabs, TabsItem, TabsItems, TabsPanel, TabsPanels } from "../tabs";

export default function TabsVerticalPreview() {
  return (
    <Tabs orientation="vertical" className="flex gap-4">
      <TabsItems className="w-60">
        <TabsItem className="w-full justify-start">
          <Users />
          <span>Users</span>
        </TabsItem>
        <TabsItem className="w-full justify-start">
          <CreditCard />
          <span>Billing</span>
        </TabsItem>
        <TabsItem className="w-full justify-start">
          <Gear />
          <span>Settings</span>
        </TabsItem>
      </TabsItems>
      <TabsPanels className="w-90">
        <TabsPanel>
          <h3 className="text-lg font-medium">Users Panel</h3>
          <p className="text-muted-foreground">Manage your users here.</p>
        </TabsPanel>
        <TabsPanel>
          <h3 className="text-lg font-medium">Billing Panel</h3>
          <p className="text-muted-foreground">
            Manage your billing information.
          </p>
        </TabsPanel>
        <TabsPanel>
          <h3 className="text-lg font-medium">Settings Panel</h3>
          <p className="text-muted-foreground">
            Configure your application settings.
          </p>
        </TabsPanel>
      </TabsPanels>
    </Tabs>
  );
}
`,
  },
  ["tabs"]: {
    component: dynamic(
      () => import("@/foundations/ui/tabs/examples/tabs.preview")
    ),
    source: `import { CreditCard, Gear, Users } from "@phosphor-icons/react/dist/ssr";
import { Tabs, TabsItem, TabsItems, TabsPanel, TabsPanels } from "../tabs";

export default function TabsPreview() {
  return (
    <Tabs>
      <TabsItems>
        <TabsItem>
          <Users />
          <span>Users</span>
        </TabsItem>
        <TabsItem>
          <CreditCard />
          <span>Billing</span>
        </TabsItem>
        <TabsItem>
          <Gear />
          <span>Settings</span>
        </TabsItem>
      </TabsItems>
      <TabsPanels>
        <TabsPanel>Panel 1</TabsPanel>
        <TabsPanel>Panel 2</TabsPanel>
        <TabsPanel>Panel 3</TabsPanel>
      </TabsPanels>
    </Tabs>
  );
}
`,
  },
  ["textarea-disabled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/textarea/examples/textarea-disabled.preview")
    ),
    source: `import { Textarea } from "../textarea";

export default function TextareaDisabledPreview() {
  return (
    <Textarea
      className="w-80"
      rows={5}
      disabled
      value="Once upon a time, in a distant galaxy, there lived a lonely star. Each day it would shine brightly, hoping to catch the attention of passing comets. One day, a beautiful comet noticed its radiant glow and decided to orbit nearby. From that day forward, the star was never lonely again."
    />
  );
}
`,
  },
  ["textarea-minimal"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/textarea/examples/textarea-minimal.preview")
    ),
    source: `import { Textarea } from "../textarea";

export default function TextareaMinimalPreview() {
  return (
    <Textarea
      className="w-80"
      variant="minimal"
      rows={5}
      placeholder="Write your next novel here"
    />
  );
}
`,
  },
  ["textarea-resize"]: {
    component: dynamic(
      () => import("@/foundations/ui/textarea/examples/textarea-resize.preview")
    ),
    source: `import { TextareaResize } from "../textarea";

export default function TextareaResizePreview() {
  return (
    <TextareaResize className="w-80" placeholder="Write your next novel here" />
  );
}
`,
  },
  ["textarea"]: {
    component: dynamic(
      () => import("@/foundations/ui/textarea/examples/textarea.preview")
    ),
    source: `import { Textarea } from "../textarea";

export default function TextareaPreview() {
  return (
    <Textarea
      className="w-80"
      rows={5}
      placeholder="Write your next novel here"
    />
  );
}
`,
  },
  ["tooltip-group"]: {
    component: dynamic(
      () => import("@/foundations/ui/tooltip/examples/tooltip-group.preview")
    ),
    source: `import { Clipboard, Scissors } from "@phosphor-icons/react/dist/ssr";
import { Button } from "../../button/button";
import { TooltipGroup, Tooltip } from "../tooltip";

export default function TooltipGroupPreview() {
  return (
    <div className="flex items-center gap-2">
      <TooltipGroup>
        <Tooltip content="Copy">
          <Button variant="outline" size="sm" square>
            <Clipboard />
          </Button>
        </Tooltip>
        <Tooltip content="Cut">
          <Button variant="outline" size="sm" square>
            <Scissors />
          </Button>
        </Tooltip>
      </TooltipGroup>
    </div>
  );
}
`,
  },
  ["tooltip-long-content"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/tooltip/examples/tooltip-long-content.preview")
    ),
    source: `import { Tooltip } from "../tooltip";

export default function TooltipLongContentPreview() {
  return (
    <Tooltip content="This is a very long tooltip content that demonstrates how tooltips handle lengthy text. The tooltip will automatically wrap the text to ensure it remains readable while maintaining a reasonable width.">
      <span>Hover me to see long content</span>
    </Tooltip>
  );
}
`,
  },
  ["tooltip-persist-click"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/tooltip/examples/tooltip-persist-click.preview"
        )
    ),
    source: `"use client";

import { useEffect, useState } from "react";
import { Tooltip } from "../tooltip";
import { Button } from "../../button/button";
import { Clipboard } from "@phosphor-icons/react";

export default function TooltipPersistClickPreview() {
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    let timeout: ReturnType<typeof setTimeout>;
    if (copied) {
      timeout = setTimeout(() => {
        setCopied(false);
      }, 2000);
    }

    return () => clearTimeout(timeout);
  }, [copied]);

  return (
    <Tooltip
      persistOnClick
      delayIn={0}
      content={copied ? "Copied!" : "Copy"}
      onOpenChange={(open) => {
        if (!open) setCopied(false);
      }}
    >
      <Button
        variant="outline"
        square
        size="sm"
        onClick={() => setCopied(true)}
        aria-label="Copy"
      >
        <Clipboard />
      </Button>
    </Tooltip>
  );
}
`,
  },
  ["tooltip-placement"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/tooltip/examples/tooltip-placement.preview")
    ),
    source: `import { Button } from "../../button/button";

import { Tooltip, TooltipGroup } from "../tooltip";

export default function TooltipPlacementPreview() {
  return (
    <div className="flex w-full flex-col gap-2 overflow-auto p-2">
      <TooltipGroup>
        <Tooltip content="Top" placement="top">
          <Button variant="outline" size="sm">
            Top
          </Button>
        </Tooltip>
        <Tooltip content="Right" placement="right">
          <Button variant="outline" size="sm">
            Right
          </Button>
        </Tooltip>
        <Tooltip content="Bottom" placement="bottom">
          <Button variant="outline" size="sm">
            Bottom
          </Button>
        </Tooltip>
        <Tooltip content="Left" placement="left">
          <Button variant="outline" size="sm">
            Left
          </Button>
        </Tooltip>
        <Tooltip content="Top Start" placement="top-start">
          <Button variant="outline" size="sm">
            Top Start
          </Button>
        </Tooltip>
        <Tooltip content="Top End" placement="top-end">
          <Button variant="outline" size="sm">
            Top End
          </Button>
        </Tooltip>
        <Tooltip content="Right Start" placement="right-start">
          <Button variant="outline" size="sm">
            Right Start
          </Button>
        </Tooltip>
        <Tooltip content="Right End" placement="right-end">
          <Button variant="outline" size="sm">
            Right End
          </Button>
        </Tooltip>
        <Tooltip content="Bottom Start" placement="bottom-start">
          <Button variant="outline" size="sm">
            Bottom Start
          </Button>
        </Tooltip>
        <Tooltip content="Bottom End" placement="bottom-end">
          <Button variant="outline" size="sm">
            Bottom End
          </Button>
        </Tooltip>
        <Tooltip content="Left Start" placement="left-start">
          <Button variant="outline" size="sm">
            Left Start
          </Button>
        </Tooltip>
        <Tooltip content="Left End" placement="left-end">
          <Button variant="outline" size="sm">
            Left End
          </Button>
        </Tooltip>
      </TooltipGroup>
    </div>
  );
}
`,
  },
  ["tooltip-rich-content"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/tooltip/examples/tooltip-rich-content.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../../avatar/avatar";
import { Tooltip } from "../tooltip";

export default function TooltipRichContentPreview() {
  return (
    <Tooltip
      content={
        <div className="flex items-center gap-1.5">
          <Avatar
            variant="square"
            size="sm"
            className="-ml-1.5 backdrop-blur-none"
          >
            <AvatarImage src="https://github.com/pdrbrnd.png" />
            <AvatarFallback>Pedro Brand√£o</AvatarFallback>
          </Avatar>
          <div className="flex flex-col">
            <span>Pedro Brand√£o</span>
            <span className="text-foreground-secondary">Significa</span>
          </div>
        </div>
      }
    >
      <span>Hover to see rich content</span>
    </Tooltip>
  );
}
`,
  },
  ["tooltip-scroll"]: {
    component: dynamic(
      () => import("@/foundations/ui/tooltip/examples/tooltip-scroll.preview")
    ),
    source: `import { Tooltip } from "../tooltip";

export default function TooltipScrollPreview() {
  return (
    <div className="h-full w-full overflow-y-auto">
      <div className="flex h-[200vh] items-center justify-center">
        <Tooltip content="Tooltip content" open>
          Scroll to see the tooltip reposition itself
        </Tooltip>
      </div>
    </div>
  );
}
`,
  },
  ["tooltip"]: {
    component: dynamic(
      () => import("@/foundations/ui/tooltip/examples/tooltip.preview")
    ),
    source: `import { Tooltip } from "../tooltip";

export default function TooltipPreview() {
  return <Tooltip content="Or is there?">Nothing to see here</Tooltip>;
}
`,
  },
};
