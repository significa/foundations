// DO NOT EDIT. This file is automatically generated by the generate-imports script.

import dynamic from "next/dynamic";
import { ComponentType } from "react";

type Import = {
  component: ComponentType;
  source: string;
};

export const imports: Record<string, Import> = {
  ["avatar-broken-image"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/avatar/examples/avatar-broken-image.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../avatar";

export default function AvatarBrokenImagePreview() {
  return (
    <Avatar>
      <AvatarImage src="broken-image-url" />
      <AvatarFallback>Pedro Brandão</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["avatar-custom-color"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/avatar/examples/avatar-custom-color.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarCustomColorPreview() {
  return (
    <Avatar className="bg-emerald-500/20">
      <AvatarFallback>Pedro Brandão</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["avatar-fallback"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar-fallback.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarFallbackPreview() {
  return (
    <div className="flex flex-wrap gap-2">
      {/* Full name */}
      <Avatar>
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      {/* One word */}
      <Avatar>
        <AvatarFallback>Significa</AvatarFallback>
      </Avatar>
      {/* Initials */}
      <Avatar>
        <AvatarFallback>PB</AvatarFallback>
      </Avatar>
      {/* No fallback */}
      <Avatar>
        <AvatarFallback />
      </Avatar>
    </div>
  );
}
`,
  },
  ["avatar-on-top-of-media"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/avatar/examples/avatar-on-top-of-media.preview"
        )
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarOnTopOfMediaPreview() {
  return (
    <div
      className="relative size-32 overflow-hidden rounded-lg bg-cover bg-center"
      style={{
        backgroundImage:
          "url(https://images.unsplash.com/photo-1682687220742-aba13b6e50ba?q=80)",
      }}
    >
      <div className="flex h-full items-center justify-center">
        <Avatar>
          <AvatarFallback>Pedro Brandão</AvatarFallback>
        </Avatar>
      </div>
    </div>
  );
}
`,
  },
  ["avatar-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar-sizes.preview")
    ),
    source: `import { Avatar, AvatarFallback } from "../avatar";

export default function AvatarSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Avatar size="2xs">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="xs">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="sm">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="md">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="lg">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="xl">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="2xl">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
      <Avatar size="3xl">
        <AvatarFallback>Pedro Brandão</AvatarFallback>
      </Avatar>
    </div>
  );
}
`,
  },
  ["avatar"]: {
    component: dynamic(
      () => import("@/foundations/ui/avatar/examples/avatar.preview")
    ),
    source: `import { Avatar, AvatarFallback, AvatarImage } from "../avatar";

export default function AvatarPreview() {
  return (
    <Avatar>
      <AvatarImage src="https://github.com/pdrbrnd.png" />
      <AvatarFallback>Pedro Brandão</AvatarFallback>
    </Avatar>
  );
}
`,
  },
  ["badge-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge-sizes.preview")
    ),
    source: `import { Badge } from "../badge";

export default function BadgeSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Badge size="xs">Extra small</Badge>
      <Badge size="sm">Small</Badge>
      <Badge size="md">Medium</Badge>
    </div>
  );
}
`,
  },
  ["badge-variants"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge-variants.preview")
    ),
    source: `import { Badge } from "../badge";

export default function BadgeVariantsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Badge variant="neutral">Neutral</Badge>
      <Badge variant="success">Success</Badge>
      <Badge variant="error">Error</Badge>
      <Badge variant="warning">Warning</Badge>
      <Badge variant="info">Info</Badge>
    </div>
  );
}
`,
  },
  ["badge"]: {
    component: dynamic(
      () => import("@/foundations/ui/badge/examples/badge.preview")
    ),
    source: `import { Package } from "@phosphor-icons/react/dist/ssr";
import { Badge, BadgeIcon, BadgeStatus } from "../badge";

export default function BadgePreview() {
  return (
    <Badge>
      <BadgeIcon>
        <Package />
      </BadgeIcon>
      <span>Up to date</span>
      <BadgeStatus className="bg-emerald-500" />
    </Badge>
  );
}
`,
  },
  ["button-as-link"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-as-link.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import { ArrowSquareOut, Package } from "@phosphor-icons/react/dist/ssr";

export default function ButtonLinkPreview() {
  return (
    <Button variant="outline" asChild>
      <a href="https://significa.co" target="_blank">
        <Package />
        <span>Significa website</span>
        <ArrowSquareOut />
      </a>
    </Button>
  );
}
`,
  },
  ["button-disabled"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-disabled.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonDisabledPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button disabled variant="primary">
        Primary
      </Button>
      <Button disabled variant="outline">
        Outline
      </Button>
      <Button disabled variant="ghost">
        Ghost
      </Button>
      <Button disabled variant="destructive">
        Destructive
      </Button>
    </div>
  );
}
`,
  },
  ["button-icons"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-icons.preview")
    ),
    source: `import {
  ArrowSquareOut,
  Package,
  Pencil,
  Sun,
} from "@phosphor-icons/react/dist/ssr";
import { Button } from "../button";

export default function ButtonIconsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button variant="outline" square aria-label="Switch theme">
        <Sun />
      </Button>
      <Button variant="outline">
        <Pencil />
        <span>Edit</span>
      </Button>
      <Button variant="outline">
        <Package />
        <span>External link</span>
        <ArrowSquareOut />
      </Button>
    </div>
  );
}
`,
  },
  ["button-loading"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-loading.preview")
    ),
    source: `"use client";

import { Button } from "@/foundations/ui/button/button";
import { useState } from "react";

export default function ButtonExample() {
  const [isLoading, setIsLoading] = useState(false);

  return (
    <Button onClick={() => setIsLoading(!isLoading)} isLoading={isLoading}>
      Click to toggle
    </Button>
  );
}
`,
  },
  ["button-sizes"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-sizes.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonSizesPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button size="sm">Small</Button>
      <Button size="md">Medium</Button>
      <Button size="lg">Large</Button>
    </div>
  );
}
`,
  },
  ["button-variants"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button-variants.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";

export default function ButtonVariantsPreview() {
  return (
    <div className="flex flex-wrap items-center gap-2">
      <Button variant="primary">Primary</Button>
      <Button variant="outline">Outline</Button>
      <Button variant="ghost">Ghost</Button>
      <Button variant="destructive">Destructive</Button>
    </div>
  );
}
`,
  },
  ["button"]: {
    component: dynamic(
      () => import("@/foundations/ui/button/examples/button.preview")
    ),
    source: `import { Button } from "@/foundations/ui/button/button";
import { HandPointing } from "@phosphor-icons/react/dist/ssr";

export default function ButtonExample() {
  return (
    <Button>
      <HandPointing />
      <span>Click me</span>
    </Button>
  );
}
`,
  },
  ["calendar-disable-future"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/calendar/examples/calendar-disable-future.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarDisableFuturePreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar
      value={selectedDate}
      onDateChange={setSelectedDate}
      getIsDisabled={(date: Date) => date > new Date()}
    />
  );
}
`,
  },
  ["calendar-locale"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar-locale.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarLocalePreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar value={selectedDate} onDateChange={setSelectedDate} locale="pt" />
  );
}
`,
  },
  ["calendar-range"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar-range.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarRangePreview() {
  const [dateRange, setDateRange] = useState<[Date, Date]>([
    new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
    new Date(),
  ]);

  return (
    <Calendar mode="range" value={dateRange} onDateChange={setDateRange} />
  );
}
`,
  },
  ["calendar-start-day"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/calendar/examples/calendar-start-day.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarStartDayPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <Calendar
      value={selectedDate}
      onDateChange={setSelectedDate}
      startWeekOn={1} // Start on Monday
    />
  );
}
`,
  },
  ["calendar"]: {
    component: dynamic(
      () => import("@/foundations/ui/calendar/examples/calendar.preview")
    ),
    source: `"use client";

import { useState } from "react";

import { Calendar } from "../calendar";

export default function CalendarPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return <Calendar value={selectedDate} onDateChange={setSelectedDate} />;
}
`,
  },
  ["checkbox-all-states"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/checkbox/examples/checkbox-all-states.preview")
    ),
    source: `"use client";

import { Label } from "@/foundations/ui/label/label";
import { Checkbox } from "../checkbox";

export default function CheckboxAllStatesPreview() {
  return (
    <div className="flex flex-col space-y-4">
      <div className="flex items-center space-x-2">
        <Checkbox id="unchecked" />
        <Label htmlFor="unchecked">Unchecked</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="checked" checked onChange={() => {}} />
        <Label htmlFor="checked">Checked</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="indeterminate" indeterminate />
        <Label htmlFor="indeterminate">Indeterminate</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled" disabled />
        <Label htmlFor="disabled">Disabled</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled-checked" checked disabled />
        <Label htmlFor="disabled-checked">Checked Disabled</Label>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox id="disabled-indeterminate" indeterminate disabled />
        <Label htmlFor="disabled-indeterminate">Indeterminate Disabled</Label>
      </div>
    </div>
  );
}
`,
  },
  ["checkbox-disabled"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/checkbox/examples/checkbox-disabled.preview")
    ),
    source: `import { Checkbox } from "../checkbox";

export default function CheckboxDisabledPreview() {
  return (
    <div className="flex flex-col space-y-4">
      <Checkbox disabled />
      <Checkbox checked disabled />
    </div>
  );
}
`,
  },
  ["checkbox"]: {
    component: dynamic(
      () => import("@/foundations/ui/checkbox/examples/checkbox.preview")
    ),
    source: `import { Checkbox } from "../checkbox";

export default function CheckboxPreview() {
  return <Checkbox />;
}
`,
  },
  ["date-picker-date-time"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/date-picker/examples/date-picker-date-time.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerPanel, DatePickerTrigger } from "../date-picker";
import { Input } from "../../input/input";

export default function DatePickerDateTimePreview() {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());

  return (
    <div className="flex items-center gap-2">
      <DatePicker placement="bottom-start">
        <DatePickerTrigger className="w-60" placeholder="Select date">
          {format(selectedDate, "PPP")}
        </DatePickerTrigger>
        <DatePickerPanel
          className="w-72"
          value={selectedDate || new Date()}
          onDateChange={(date: Date) => {
            setSelectedDate(date);
          }}
        />
      </DatePicker>
      <Input className="w-40" type="time" />
    </div>
  );
}
`,
  },
  ["date-picker-shortcuts"]: {
    component: dynamic(
      () =>
        import(
          "@/foundations/ui/date-picker/examples/date-picker-shortcuts.preview"
        )
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerTrigger, DatePickerPanel } from "../date-picker";
import { DropdownDivider, DropdownItem } from "../../dropdown/dropdown";

export default function DatePickerShortcutsPreview() {
  const [dateRange, setDateRange] = useState<[Date, Date] | null>(null);

  return (
    <DatePicker placement="bottom-start">
      <DatePickerTrigger className="w-80" placeholder="Select date range">
        {dateRange
          ? format(dateRange[0], "MM/dd/yyyy") +
            " - " +
            format(dateRange[1], "MM/dd/yyyy")
          : undefined}
      </DatePickerTrigger>
      <DatePickerPanel
        className="w-80"
        mode="range"
        value={dateRange}
        onDateChange={(dates: [Date, Date]) => {
          setDateRange(dates);
        }}
      >
        <DropdownDivider />
        <DropdownItem
          onSelect={() => {
            setDateRange([new Date(), new Date()]);
          }}
        >
          Today
        </DropdownItem>
        <DropdownItem
          onSelect={() => {
            setDateRange([
              new Date(new Date().setDate(new Date().getDate() - 1)),
              new Date(new Date().setDate(new Date().getDate() - 1)),
            ]);
          }}
        >
          Yesterday
        </DropdownItem>
        <DropdownItem
          onSelect={() => {
            setDateRange([
              new Date(new Date().setDate(new Date().getDate() - 7)),
              new Date(),
            ]);
          }}
        >
          Last 7 days
        </DropdownItem>
        <DropdownDivider />
        <DropdownItem
          className="text-red-500"
          onSelect={() => {
            setDateRange(null);
          }}
        >
          Clear
        </DropdownItem>
      </DatePickerPanel>
    </DatePicker>
  );
}
`,
  },
  ["date-picker"]: {
    component: dynamic(
      () => import("@/foundations/ui/date-picker/examples/date-picker.preview")
    ),
    source: `"use client";

import { useState } from "react";
import { format } from "date-fns";

import { DatePicker, DatePickerPanel, DatePickerTrigger } from "../date-picker";

export default function DatePickerPreview() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  return (
    <DatePicker placement="bottom-start">
      <DatePickerTrigger className="w-60" placeholder="Select date">
        {selectedDate ? format(selectedDate, "PPP") : undefined}
      </DatePickerTrigger>
      <DatePickerPanel
        className="w-72"
        value={selectedDate}
        onDateChange={(date: Date) => {
          setSelectedDate(date);
        }}
      />
    </DatePicker>
  );
}
`,
  },
  ["dialog-arbitrary"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-arbitrary.preview")
    ),
    source: `import { X } from "@phosphor-icons/react/dist/ssr";

import { Button } from "../../button/button";
import { Dialog, DialogClose, DialogContent, DialogTrigger } from "../dialog";

export default function DialogArbitraryPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Dialog</Button>
      </DialogTrigger>
      <DialogContent className="p-0">
        <DialogClose className="absolute top-3 right-3" asChild>
          <Button variant="outline" size="sm" square>
            <X className="size-4" />
          </Button>
        </DialogClose>
        <div className="flex flex-col items-center rounded-2xl p-6">
          <div className="border-border bg-background-secondary mb-4 size-24 rounded-full border" />
          <h2 className="text-xl font-semibold">John Doe</h2>
          <p className="text-foreground-secondary mb-4 text-sm">
            Software Engineer
          </p>
          <div className="mb-6 flex space-x-4">
            <div className="text-center">
              <p className="font-semibold">1.2k</p>
              <p className="text-foreground-secondary text-xs">Followers</p>
            </div>
            <div className="text-center">
              <p className="font-semibold">3.4k</p>
              <p className="text-foreground-secondary text-xs">Following</p>
            </div>
            <div className="text-center">
              <p className="font-semibold">567</p>
              <p className="text-foreground-secondary text-xs">Posts</p>
            </div>
          </div>
          <Button>Follow</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-destructive"]: {
    component: dynamic(
      () =>
        import("@/foundations/ui/dialog/examples/dialog-destructive.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogDestructivePreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="destructive">Delete</Button>
      </DialogTrigger>
      <DialogContent className="w-80">
        <DialogTitle>Are you sure?</DialogTitle>
        <DialogDescription>
          This action cannot be undone. This will permanently delete your
          account and remove your data from our servers.
        </DialogDescription>
        <DialogActions>
          <Button variant="destructive">Delete everything</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-tall"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-tall.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogTallPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open Tall Dialog</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogTitle>Very Tall Dialog</DialogTitle>
        <div>
          {Array(20)
            .fill(null)
            .map((_, index) => (
              <p key={index} className="mb-4">
                This is paragraph {index + 1}. Lorem ipsum dolor sit amet,
                consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut
                labore et dolore magna aliqua.
              </p>
            ))}
        </div>
        <DialogActions>
          <DialogClose asChild>
            <Button variant="outline">Close</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog-top"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog-top.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogTopPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open at the top</Button>
      </DialogTrigger>
      <DialogContent align="top">
        <DialogTitle>Unsaved changes</DialogTitle>
        <DialogDescription>
          Are you sure you want to leave this page?
        </DialogDescription>
        <DialogActions>
          <Button>Confirm</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["dialog"]: {
    component: dynamic(
      () => import("@/foundations/ui/dialog/examples/dialog.preview")
    ),
    source: `import { Button } from "../../button/button";
import {
  Dialog,
  DialogActions,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export default function DialogPreview() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Open</Button>
      </DialogTrigger>
      <DialogContent className="w-80">
        <DialogTitle>Unsaved changes</DialogTitle>
        <DialogDescription>
          Are you sure you want to leave this page?
        </DialogDescription>
        <DialogActions>
          <Button>Confirm</Button>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
        </DialogActions>
      </DialogContent>
    </Dialog>
  );
}
`,
  },
  ["spinner"]: {
    component: dynamic(
      () => import("@/foundations/ui/spinner/examples/spinner.preview")
    ),
    source: `import { Spinner } from "@/foundations/ui/spinner/spinner";

export default function SpinnerExample() {
  return <Spinner />;
}
`,
  },
};
